<?php
/**
 * @var \Digicor\Bom\Block\BomConfigurator $block
 */

/** @var int|null $bomCollectionEntityId */
$bomCollectionEntityId = $block->getBomCollectionEntityId();

/** @var int|null $productId */
$productId = (int)$block->getProduct()->getId();

?>

<script>
    const pageData={
        showErrorDialog:false,
        customer:null,
        mainParts:[],
        showSection:"",
        storageSection:0,
        bootDriveIndex:0,
        showDriveIndex:0,
        showFix:'',
        //choose slot array
        fh_speed_x4_arr:[],
        fh_speed_x8_arr:[],
        fh_speed_x16_arr:[],
        lp_speed_x4_arr:[],
        lp_speed_x8_arr:[],
        lp_speed_x16_arr:[],
        //The rest of slot
        available_max_pcie_x4_fh_slot: 0,
        available_max_pcie_x8_fh_slot: 0,
        available_max_pcie_x16_fh_slot: 0,

        available_max_pcie_x4_lp_slot: 0,
        available_max_pcie_x8_lp_slot: 0,
        available_max_pcie_x16_lp_slot: 0,

        //Already used speed:
        fh_speed_x4:0,
        fh_speed_x8:0,
        fh_speed_x16:0,

        lp_speed_x4:0,
        lp_speed_x8:0,
        lp_speed_x16:0,

         //Already used lsot:
        fh_speed_x4_slot:0,
        fh_speed_x8_slot:0,
        fh_speed_x16_slot:0,

        lp_speed_x4_slot:0,
        lp_speed_x8_slot:0,
        lp_speed_x16_slot:0,

        sasTotalCheked:0,
        sataTotalCheked:0,
        showConfigInfo:true,
        showInitConfig:true,
        occupy_bays_number:0,
        nvme_raid_controller_number:0,
        storageDriveSection:[],


        cpuDefaultPrice: 0,
        customerGp: 0.25,
        cpu: null,
        ramDefaultPrice: 0,
        ram: null,
        selectItemArray: [],
        selectSection: [],
        selectSectionDefault: [],
        selectCost: [],
        cpuNum: 0,
        cpuSectionId: 0,
        raidcontrollerSection: "",
        driveSection: [],
        osSectionId: 0,
        osMin: 0,
        PCIESection: [],
        warPick: {},
        warrantyDriveChecking: 0,
        checkedRaidController: false,
        totalPrice: 0,
        totalPriceDefault: 0,
        init_price: 0,
        originalInitPrice: 0,
        curPrice: 0,
        raidControllerSelected: [],
        driveSelected: [],
        finalPrice: 0,
        finalPriceDefault: 0,
        beforeCheck: true,
        formData: {},
        cpuSelectCores: 0,
        finalOSCores: 0,
        raid: [],
        storage: [],
        OSCores: 0,
        softwareCores: 0,
        newSection: [],
        currentURL: false,
        accessory_define_cost: 0,
        totalCost: 0,
        WarrantyCost: 0,
        hasRaid : false,
        bootDriveSection:[],
        

        collectionSection:[],
        sectionCollectionName:[],
        baysNumberPercent:0,
       
        showQuoteUs:false,
        pcieError:false,
        errorStatus:false,


        //raid set up
        driveVolume:[],
        volumeRaid:[],
        volumeData: {
            volume: [],
        },
        show_volume_dialog:false,
        show_hot_spare_dialog:false,
        hotVolume:[],
        hotSwapRC: "",
        hotSwapData: {
            hotSwapindex: [],
        },
        hotSwapList2: [{
                label: 1,
                value: 1,
            },
            {
                label: 2,
                value: 2,
            },
        ],
        hotSwapList1: [{
            label: 1,
            value: 1,
        }, ],
        onBoardraidType: [
            {
                type: "none",
                require: 0,
                message: "Individual disks",
                error_message: "none",
                rate: 0.91,
                minus_quantity: "/99",
            },
            {
                type: 0,
                require: 2,
                message: "Disk striping, No redundancy",
                error_message: "",
                rate: 0.91,
                minus_quantity: "-0",
            },
            {
                type: 1,
                require: 2,
                message: "Disk mirroring, up to 1 failure",
                error_message: "RAID 1 requires at least 2 drives",
                rate: 0.91,
                minus_quantity: "/99 + 1",
            },
            {
                type: 10,
                require: 4,
                message: "Stripping + Mirroring, up to 2 failures.",
                error_message: "RAID 10 requires at least 4 drives",
                rate: 0.91,
                minus_quantity: "/2",
        }],

        showWarranty:false,
        AssemblyPrice:0
    }
    
    function removeHTMLTags(str) {
        return str.replace(/<[^>]*>/g, '');
    }
 

    // function warrantySymbol(price){
    //     let final_val = ''
    //     if(price > pageData.curPrice){
    //         final_val = '+'
    //     }else{
    //         final_val = ''
    //     }
    //     return final_val
    // }

    // function warrantyPrice(price){
    //     let final_val = price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    //     return final_val
    // }
    
    function changePrice(price){
        let final_val = price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return final_val
    }
    /**
     * @description Modify the order of BOM sections
     * @param {Array} section:The section that needs to be sorted
     * @returns {Array} 
     */
    function initBom(section) {
        var bom = []
        var sectionName = []
        var order = []
        section.forEach((item) => {
            sectionName.push(item.name)
        })
        order = ['BareBom','CPU', 'Processor', 'High-End Processor', 'Memory', 'Rear BootDrive', 'M.2 BootDrive', 'U.2 NVME', 'U.2 NVME Drive']

        bom = section.filter(sect => order.indexOf(sect.name) != -1)
        bom.sort((a, b) => {
            return order.indexOf(a.name) - order.indexOf(b.name)
        })
        var otherSection = section.filter(sect => order.indexOf(sect.name) == -1)
        section = bom.concat(otherSection)
        return section
    }

    

    /**
     * @description Calculate the final price 
     * @param {Number} total_price:The total price of the selected single component and accessories
     * @param {Number} warrantyCurrentPrice:Total warranty price
     * @returns {Number} price:final price
     */function formatFinalPrice(totalPrice, warrantyCurrentPrice,AssemblyPrice) {
        // console.log(pageData.selectCost,pageData.selectSectionDefault,warrantyCurrentPrice,pageData.hasRaid,pageData.raidControllerSelected,pageData.driveSelected,'warrantyCurrentPricewarrantyCurrentPricewarrantyCurrentPrice')
        var price = parseFloat(totalPrice) + parseFloat(warrantyCurrentPrice) + parseFloat(AssemblyPrice)
        price = parseInt(Math.round(price) + '.00')
        return price
    
    }
    /**
     * @description Calculate the price of warranty 
     * @param {Object} formData: bom data
     * @param {Object} warPick:Selected warranty contents
     * @param {Number} curPrice:The warranty price before
     * @param {Array} selectCost:Selected hardware and other content cost collection
     * @param {Number} accessory_define_cost:Cost of default accessories
     * @param {Number} customer_gp:Selected warranty contents
     * @returns {Array} [new warranty list,new warranty price,new warranty price,select warranty]
     */
    function checkWarranty(formData, warPick, curPrice, totalPrice,accessory_define_cost, customerGp) {
        if (formData.bom_type == 3) {
            formData.warranties = formData.warranty
        }
        
        formData.warrantyList = pageData.formData.warranties
        var checkPreset = false;
        if ( formData.warrantyList && formData.warrantyList[0].name == "Return To Base warranty") {
            formData.warrantyList.shift(1);
            checkPreset = true;
        }
       
       
        var warranty_customerGp = customerGp

        formData.warrantyCurrentPrice = (totalPrice * warPick.percentage / (1 - pageData.formData.gp));

        
        if(formData.warrantyList){
            formData.warrantyList.forEach(function (element, i) {
                element.value = i + 1;
            })
        }
        curPrice = formData.warrantyCurrentPrice;

        if (checkPreset == true) {
            warPick = formData.warrantyList[0].single[0];
        }
        const warrantyList = formData.warrantyList
        const warrantyCurrentPrice = formData.warrantyCurrentPrice
        return [warrantyList, curPrice, warrantyCurrentPrice, warPick];
    }
    
    /**
     * @description When configuring the raid controller, update the status of the error information in the directory
     * @param {Blooean} errorChecking:drive displays an error or correct message
     */
    function normalDriveSectionError(errorChecking){
        var num = 0
        
        // When errorChecking is true, display the error message; when errorChecking is false, hide the error message


            
        for (let index = 0; index < pageData.storageDriveSection.length; index++) {
            if(pageData.formData.sections[pageData.storageDriveSection[index]].finalNum>0){
                
                //When the onboard_raid_controller_suport_type of BOM is sata

                if(pageData.formData.onboard_raid_controller_support_type && pageData.formData.onboard_raid_controller_support_type == 'sata'){
                    
                    // To configure sas dive, a sas raid controller needs to be configured

                    if(pageData.sasTotalCheked>0 ){
                        if (pageData.formData.sections[pageData.storageDriveSection[index]].errors) {
                            var seAcc = pageData.formData.sections[pageData.storageDriveSection[index]].errors.find(
                                (x) => x.id === 10
                            );
                            seAcc.active = errorChecking;
                        }
                    }
                    
                     // If the number of configured Sata drives exceeds 8 , a raid controller needs to be configured

                    if( pageData.sataTotalCheked > 8 ){

                    
                        if (pageData.formData.sections[pageData.storageDriveSection[index]].errors) {
                            var seAcc = pageData.formData.sections[pageData.storageDriveSection[index]].errors.find(
                                (x) => x.id === 9
                            );
                            seAcc.active = errorChecking;
                        }
                    }

                    
                }else if(pageData.formData.onboard_raid_controller_support_type && pageData.formData.onboard_raid_controller_support_type == 'sas' || pageData.formData.onboard_raid_controller_support_type == 'none'){
                    
                    // When onboard_raid_controller_suport_type is none or sas, sas drive is configured and two error messages are displayed simultaneously

                    if(pageData.sasTotalCheked>0){
                        if (pageData.formData.sections[pageData.storageDriveSection[index]].errors) {
                            var seAcc = pageData.formData.sections[pageData.storageDriveSection[index]].errors.find(
                                (x) => x.id === 10
                            );
                            seAcc.active = errorChecking;
                        }
                    }

                    if (pageData.formData.sections[pageData.storageDriveSection[index]].errors) {
                        var seAcc = pageData.formData.sections[pageData.storageDriveSection[index]].errors.find(
                            (x) => x.id === 9
                        );
                        seAcc.active = errorChecking;
                    }
                }


                
                
            
            }
            
        }
        
    }

     /**
     * @description Obtain the error message status of the AOC Section
     * @param {Blooean} errorChecking:pcie displays an error or correct message
     */
    function pcieSectionError(errorChecking){
        // When errorChecking is true, display error message; otherwise, hide error message

        for (let index = 0; index < pageData.PCIESection.length; index++) {
            if (pageData.formData.sections[pageData.PCIESection[index]].errors) {
                var seAcc = pageData.formData.sections[pageData.PCIESection[index]].errors.find(
                    (x) => x.id === 3
                );
                seAcc.active = errorChecking;
            }

        }
        // pageData.errorStatus = errorChecking
    }


     /**
     * @description Obtain the maximum number of choices for each drive in the volume sign pop-up window
     * @param {Object} raid:The currently selected raid controller，quantity:The current drive's quantity
     */
    function stepping (raid, quantity) {
            if (raid == "") {
                return [];
            } else {
                var port = 0;
                // if (raid.raidType == 1) {
                if (raid.type == 1) {
                    quantity = quantity > 4 ? 4 : quantity;
                }
                
                var step = quantity;
                var baseArray = [];
                var n = 1;
                while (n <= step) {
                    var base = {
                        value: n,
                        label: n,
                    };
                    baseArray.push(base);
                    n++;
                }
                return baseArray;
            }
    }

    /**
     * @description Get the data of the raid type in the raid controller
     * @param {Object} raid:The currently selected raid controller
     */
    function steppingRaidType (raid) {
        if (raid == "") {
            return [];
        } else {
            var baseArray = [];
            if (raid.type == 1) {
                baseArray = pageData.onBoardraidType;
            } else {
                baseArray = raid.raid.raid_types;
            }
            console.log(baseArray,'baseArraybaseArray')
            return baseArray;
        }
       
    }

    
   

     /**
     * @description Add the required default sections such as barebone or chassis to the main_parts field for independent data processing in the future
     * @param {Object} bom:Product data
     */
    function addselectItemArray(bom) {
         // Example Initialize mainParts data
        pageData.mainParts = []
        bom.sections.forEach(item=>{
            if(item.is_main_part == true){
                pageData.mainParts.push(item)
            }  
            
        })



         // Initializes the default accessory price
        pageData.accessory_define_cost = bom.init_define_cost
        var section = bom.sections
        pageData.init_price = bom.init_price
        pageData.originalInitPrice = bom.init_price


         // Initializes the default section to the selected state
        pageData.selectItemArray = []
        pageData.mainParts.forEach((item,i) => {
            pageData.selectItemArray.push({
                section: item.name,
                id: item.groups[0].components[0].name,
                name: item.groups[0].components[0].name,
                quantity: 1,
            });
             // Initialize default section prices, costs, etc
            pageData.selectSection[i] = parseFloat(0);
            pageData.selectSectionDefault[i] = parseFloat(0);

        })

        // The initial default warranty is the first
        pageData.formData.warranties.forEach((item, index) => {
            pageData.formData.warraty = 1
            if (item.is_checked == true) {
            pageData.formData.warraty = index + 1
            }
            // console.log(    pageData.formData.warraty,'    pageData.formData.warraty')
        })

        pageData.formData.warranty_name = pageData.formData.warranties[pageData.formData.warraty - 1].name
        pageData.warPick = pageData.formData.warranties[pageData.formData.warraty - 1]

       

    }

    

    /**
     * @description Add count fields for group, single, and section
     * @param {Object} section:Currently selected sect
     */
    function appendCountToSingle(section) {
        for (const groupItem of section.groups) {
        groupItem.count = 0;
        groupItem.compare_url = null
        groupItem.checkNum = 0;
        for (const singleItem of groupItem.components) {
            singleItem.count = 0;
            if(singleItem.is_checked === true){
                section.finalNum = 0

            }
        }
        }
    }
     /**
     * @description Enter the object and check whether it is empty
     * @param {Object} obj:Objects to be judged
     * @returns {Boolean} 
     */
    function isEmptyObject(obj) {
        return Object.keys(obj).length === 0;
    }
    /**
     * @description Check the page options for errors, if not, assemble data update shopping cart, if so, an error message
     */
    async function addCart(){
    
        var errorNum = 0
        pageData.formData.sections.map(sect=>{
            sect.errors.map(error=>{
              if(error.active == true){
                errorNum=errorNum+1

              }
            })
          })

          //When the product configuration is successful, request the interface
        if(errorNum==0){
                var item = []
                var warranty = pageData.warPick.sku
                var drives = []
                var raid_controller = []

                if(pageData.driveSelected.length>0){
                    pageData.driveSelected.map(item=>{
                        drives.push(item)
                    })
                }
                if(pageData.raidControllerSelected.length>0){
                    pageData.raidControllerSelected.map(item=>{
                        raid_controller.push(item)
                    })
                }
                pageData.formData.sections.map(section=>{
                    if(section.finalNum>0){
                        section.groups.map(group=>{
                            group.components.map(component=>{
                                if(component.is_checked == true && component.quantity >0){
                                    item.push({
                                        sku:component.sku,
                                        quantity:Number(component.quantity),
                                        section_name:component.section_name,
                                        price:component.price
                                    })
                                }
                            })
                        })
                    }
                       
                })
                if(!isEmptyObject(pageData.accessories)){
                  
                    Object.keys(pageData.accessories).forEach(key => {
                        console.log(key, pageData.accessories[key]);
                            item.push({
                                section_name:'Accessory',
                                sku:pageData.accessories[key].sku,
                                quantity:Number(pageData.accessories[key].quantity),
                            
                            })
                    });
                }

                
                
                pageData.formData.warranties.map(item=>{
                        if(item.is_checked == true){
                            // warranty = {
                            //     sku:item.sku,
                            //     quantity:1,
                            //     section_name:'Warranty',
                            //     price:0
                            // }
                            warranty = item.sku
                        }
                    })
                
                var info={
                    bom_id:pageData.formData.bom_id,
                    price:pageData.finalPrice,
                    qty:pageData.quantity,
                    items:item,
                    raid_set_up:{
                        drives:drives,
                        raidController:raid_controller
                    }

                }
                const response = await fetch('/StoreApi/Cart/Add/',{
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    credentials: 'include',
                    body:`bom_id=${info.bom_id}&price=${info.price}&qty=${info.qty}&items=${JSON.stringify(info.items)}&warranty=${warranty}&raid_setup=${JSON.stringify(info.raid_set_up)}`,
                })
                console.log(response,'responseresponseresponse')
                if(response.status == 401){
                    window.location.href="/customer/account/login/referer/aHR0cDovLzEyNy4wLjAuMTo4MDAxL2N1c3RvbWVyL2FjY291bnQvaW5kZXgv/"
                }else{
                    const response2 = await fetch('/StoreApi/Cart/UpdateCartPrice/',{
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    credentials: 'include',
                    body:`bom_id=${info.bom_id}&price=${info.price}&qty=${info.qty}&items=${JSON.stringify(info.items)}&warranty=${JSON.stringify(warranty)}&raid_setup=${JSON.stringify(info.raid_set_up)}`,
                })
                if(response2.status != 401){
                    window.location.reload()
                }
                window.localStorage.setItem('bomInfo', JSON.stringify(pageData.formData));
                window.localStorage.setItem('drives', JSON.stringify(pageData.driveSelected));
                window.localStorage.setItem('raidController', JSON.stringify(pageData.raidControllerSelected));
                window.location.reload()
            }
            
                    
        } else {
            pageData.showErrorDialog = true
        }  

        
       
    }
    function quoteUs(){
        window.alert("Quote Us")
    }
       
    /**
     * @description Get product data and selected content according to product id and quoteid for page rendering
     */
    function setup() {
        const bomCollectionEntityId = <?php echo json_encode($bomCollectionEntityId); ?>;
        const productId = <?php echo json_encode($productId); ?>;
        return{
            data:null,
            BomCollection:null,
            BomCollection_row:[],
            BomRowLength:[],
            pageData:pageData,

           
            async fetchData() {

                // const response = await fetch('https://testing.digicor.com.au/rest/V1/bomCollections/GetByProductEntityId/9305')  
                const response = await fetch('/rest/V1/bomCollections/GetByProductEntityId/'+ bomCollectionEntityId)

                this.BomCollection = (await response.json()).items
                if(this.BomCollection.length>0){
                    this.BomCollection.map(item=>{
                        if(this.BomCollection_row.indexOf(item.row_position) == -1){
                            this.BomRowLength.push(Number(item.row_length))
                            this.BomCollection_row.push(item.row_position)
                            
                        }
                    })
                }
                
                console.log(this.BomCollection,"999888--")
                
                
                if(window.localStorage.getItem('bomInfo')){
                   
                    this.data = JSON.parse(window.localStorage.getItem('bomInfo'))
                    this.fillBom(this.data)
                    this.pageData.driveSelected = JSON.parse(window.localStorage.getItem('drives'))
                    this.pageData.raidControllerSelected = JSON.parse(window.localStorage.getItem('raidController'))
                    console.log(this.pageData.driveSelected,this.pageData.raidControllerSelected )
                    window.localStorage.removeItem('bomInfo')
                    window.localStorage.removeItem('drives');
                    window.localStorage.removeItem('raidController');
                
                 
                }else{
                    if(this.BomCollection && this.BomCollection.length>0){
                        var id = ''
                        if(productId != bomCollectionEntityId){
                             id = productId
                        }else{
                             id = this.BomCollection[0].linked_product_id
                        }
                        
                        const result = await fetch('/rest/V1/boms/GetByProductEntityId/' + id)
                        this.data = await result.json()
                        this.fillBom(this.data)
                       
                    }
                }
            },


            // Click on the BOM collection request interface to display the corresponding BOM data
            
            async newfetchData(id) {
                

                const response = await fetch(`/rest/V1/boms/GetByProductEntityId/${id}`)
                this.data=""
                this.data = await response.json()

                this.fillBom(this.data)

                
                
            },

            /**
                * @description Add basic data required for the page based on the obtained bom data
                * @param {Object} bom:Product data to be processed
                * @returns {Array} 
             */
            fillBom(bom) {
                // Sort sections according to the specified order
                initBom(bom.sections)
                // Set default parameters
                this.pageData.formData = bom
                this.pageData.quantity = 1
                this.pageData.baysNumberPercent = 0
                this.pageData.formData.select_CPU_amount = 0,
                this.pageData.formData.select_PCIE_amount = 0,
                this.pageData.formData.select_Ram_campacity = 0,
                this.pageData.formData.select_Ram_amount = 0,
                this.pageData.formData.select_CPU_core = 0,
                this.pageData.PCIESection = [];
                this.pageData.occupy_bays_number = 0
                this.pageData.first_section_index = null
                this.pageData.sectionCollectionName = []
                this.pageData.storageDriveSection =[]
                this.pageData.driveSection = []
                this.pageData.nvme_raid_controller_number = 0
                this.pageData.sasTotalCheked = 0
                this.pageData.sataTotalCheked = 0
                this.pageData.init = false
                this.pageData.showQuoteUs = false
                this.pageData.pcieError = false

                this.pageData.accessories = []
                this.pageData.AssemblyPrice = 0

                addselectItemArray(bom)
                var cpu_min = 0;
    

                this.pageData.cpuNum = 0;
                this.pageData.bootDriveSection = []
                this.pageData.raid_controller_section = []
            
                this.pageData.collectionSection = []
                this.pageData.formData.sections = initBom(this.pageData.formData.sections)
                var first_section_index = null
                
                // Look for the storage section
                for (var i = 0; i < this.pageData.formData.sections.length; i++) {
                    this.pageData.formData.sections[i].sectIndex = i
            
            
                    // Look for the section for boot drive
                    if(this.pageData.formData.sections[i].name == 'Rear BootDrive'  || this.pageData.formData.sections[i].name == 'M.2 BootDrive'  ){
                        this.pageData.bootDriveSection.push(this.pageData.formData.sections[i])

                    }
                    // Look for the section for raid controller
                    if(this.pageData.formData.sections[i].name == 'SAS Raid Controller' ){

                        this.pageData.raid_controller_section.push(this.pageData.formData.sections[i])
                    }

                    // Add properties to sections for calculations or error checking, etc
                    this.pageData.formData.sections[i].total_bays_num_percent = 0
                    this.pageData.formData.sections[i].occupy_bays_number = 0
                    this.pageData.formData.sections[i].tabIndex = '0';
                    this.pageData.formData.sections[i].showSection = false
                    this.pageData.formData.sections[i].finalNum = 0;
                    this.pageData.formData.sections[i].percent = 0;
                    this.pageData.formData.sections[i].storage_bays_percent = 0
                    this.pageData.baysNumberPercent = parseInt((this.pageData.occupy_bays_number / this.pageData.formData.front_max_drives) * 100);
                    this.pageData.formData.sections[i].baysNum = this.pageData.formData.front_max_drives
                    appendCountToSingle(this.pageData.formData.sections[i]);
                    this.pageData.formData.sections[i].selectNumber = 0
                    this.pageData.formData.sections[i].selectGroup = [];
                    this.pageData.formData.sections[i].category_name = this.pageData.formData.sections[i].category_name.toLowerCase()

        
                    // Classification and assembly are performed according to different collection names and recorded in the collectionSection
                    // The collection names that exist in all the obtained sections are stored in the sectionCollectionName
                    if(this.pageData.formData.sections[i].is_main_part == false   ){

                        var index = null


                        if( this.pageData.formData.sections[i].collection_name && this.pageData.formData.sections[i].collection_name != null && this.pageData.formData.sections[i].name != 'SAS Raid Controller'){
                            if(this.pageData.sectionCollectionName.indexOf(this.pageData.formData.sections[i].collection_name) == -1){
                                
                                this.pageData.sectionCollectionName.push(this.pageData.formData.sections[i].collection_name)
                                first_section_index = i

                            

                            }else{

                                this.pageData.collectionSection[first_section_index-1].section.push(this.pageData.formData.sections[i])
                            
                            }
                            index = this.pageData.sectionCollectionName.indexOf(this.pageData.formData.sections[i].collection_name )

                            this.pageData.collectionSection.push({
                                IsShowStorageType:'drive',
                                showSection:this.pageData.formData.sections[first_section_index].showSection,
                                sectIndex:index,
                                first_section_index:first_section_index,
                                tabIndex:0,
                                collection_name:this.pageData.formData.sections[i].collection_name,
                                section:[this.pageData.formData.sections[i]]
                            })
                            
                        }else {
                            this.pageData.collectionSection.push({
                                IsShowStorageType:'drive',
                                showSection:this.pageData.formData.sections[i].showSection,
                                collection_name:null,
                                first_section_index:i,
                                sectIndex:index,
                                tabIndex:0,
                                section:[this.pageData.formData.sections[i]]
                            })
                        }


                    }
                    
                    // Record the section id and minimum value of the cpu
                    if (this.pageData.formData.sections[i].category_name == "cpu") {
                        this.pageData.cpuSectionId = i;
                        if (this.pageData.cpu_min < this.pageData.formData.sections[i].minimum_quantity) {
                        this.pageData.cpu_min = this.pageData.formData.sections[i].minimum_quantity;
                        }
                        this.pageData.cpuNum++;
                
                    }
                    // Record whether the raid controller exists and the section id
                    if (this.pageData.formData.sections[i].category_name == 'raid controller') {
                        if(this.pageData.formData.sections[i].name == "SAS Raid Controller"){
                            this.pageData.raidcontrollerSection = i;
                        }
                            
                            var attributes = this.pageData.formData.sections[i].groups[0].components[0].attributes
                            var support_type = attributes.find((x) => x.attribute_code=="support_type").value
                            if (support_type && support_type != 'nvme') {
                                this.pageData.hasRaid = true;
                            }
                        
                    }
                    // Records whether an operating system exists and the minimum number of cores supported
                    if (this.pageData.formData.sections[i].category_name == "operating system") {
                        this.pageData.osSectionId = i;
                        this.pageData.osMin = this.pageData.formData.sections[i].min;
                    }
                    if (this.pageData.formData.sections[i].category_name == "drive") {
                        for(var m=0;m<this.pageData.formData.sections[i].groups.length;m++){
                            if(this.pageData.formData.sections[i].name!= 'M.2 BootDrive' &&  this.pageData.formData.sections[i].name!= 'Rear BootDrive'&& this.pageData.formData.sections[i].groups[m].components[0].attributes.find(x=>x.attribute_code == "platform_type") && this.pageData.formData.sections[i].groups[m].components[0].attributes.find(x=>x.attribute_code == "platform_type").value  == 'sas'){
                                this.pageData.driveSection.push(i)
                            }
                        }
                        if(this.pageData.formData.sections[i].name!= 'M.2 BootDrive'  &&  this.pageData.formData.sections[i].name!= 'Rear BootDrive'){
                            this.pageData.storageDriveSection.push(i)
                        }

                    }
        
        
            
                    if( this.pageData.formData.sections[i].category_name == 'nic' ||
                        this.pageData.formData.sections[i].category_name == 'raid controller' ||
                        this.pageData.formData.sections[i].category_name == 'gpu'
                        
                    ){
                        this.pageData.PCIESection.push(i);
                    }
                    // Set the price, cost, etc. of the content selected by default for each section to 0
                    var num = this.pageData.mainParts.length
                    this.pageData.selectSection[i + num] = 0;
                    this.pageData.selectSectionDefault[i + num] = 0;
                }
                // Perform the selected compute event for the data that is selected by default for the product
                for (var i = 0; i < this.pageData.formData.sections.length; i++) {
                    if (this.pageData.formData.sections[i].category_name == "cpu") {
                        this.pageData.formData.sections[i].min = cpu_min;
                    }
                    for (var m = 0; m < this.pageData.formData.sections[i].groups.length; m++) {
                        this.pageData.formData.sections[i].groups[m].components.forEach((element,e_index) => {
                        if (element.is_checked == true) {
                            var checking = this.groupItemSelect(
                            i,
                            
                            this.pageData.formData.sections[i],
                            this.pageData.formData.sections[i].groups[m],
                            element,
                            
                            );
                        }
                        });
                    }
                }
                
       
                // Total price
                this.totalPrice("init33");
                // initCurrentURL(url)
                setTimeout(() => {
                    this.pageData.init = true
                }, 2000);
        
            },

            /**
                * @description Organize the single data and accessories data for configuration
             */
            newSelectItemArray(){
                this.pageData.selectItemArray = []
                this.pageData.accessories = []
                const map = {};
                var accessories = []
                var sectionCollectionName = []
                var sections = initBom(this.pageData.formData.sections)
                var info=""
                var rear_dirve_num = 0
                var rear_dirve_info=[]
                var section_name = []

                this.pageData.formData.bom_accessories.map(item=>{
                    accessories.push({
                        quantity: item.quantity,
                        sku:item.sku 
                    })
                })
                sections.map(item=>{
                    if(item.is_main_part == true){
                        sectionCollectionName.push(item.collection_name)
                        this.pageData.selectItemArray.push({
                            section: item.name,
                            id: removeHTMLTags(item.groups[0].components[0].description),
                            name: removeHTMLTags(item.groups[0].components[0].description),
                            quantity: item.groups[0].components[0].quantity,
                        })
                    }
                })
            
                for (var i = 0; i < sections.length; i++) {
                    for (var m = 0; m < sections[i].groups.length; m++) {
                        for (var j = 0; j < sections[i].groups[m].components.length; j++) {
                            if(sections[i].is_main_part == false){
                                if(sections[i].groups[m].components[j].is_checked == true && sections[i].groups[m].components[j].quantity >0){
                                    sections[i].groups[m].components[j].accessories.map(item=>{
                                        accessories.push({
                                            quantity: item.quantity * sections[i].groups[m].components[j].quantity,
                                            sku:item.sku 
                                        })
                                    })
                                
                                    if(sections[i].name == "Rear BootDrive" || sections[i].name == "M.2 BootDrive"){
                                        info = 'Boot Drive'
                                        rear_dirve_num +=1
                                        var sectionExists = rear_dirve_info.some(item => item.section === sections[i].name);
                                        if (!sectionExists) {
                                                rear_dirve_info.push({
                                                    section: sections[i].name,
                                                    id: info+sections[i].groups[m].components[j].description,
                                                    name: sections[i].groups[m].components[j].description,
                                                    quantity: sections[i].groups[m].components[j].quantity,
                                                    collection_name:sections[i].collection_name
                                                });

                                        }else{
                                            rear_dirve_info.push({
                                                section: '',
                                                id: info+sections[i].groups[m].components[j].description,
                                                name: sections[i].groups[m].components[j].description,
                                                quantity: sections[i].groups[m].components[j].quantity,
                                                collection_name:sections[i].collection_name
                                            });

                                        }
                                    }else{
                                        info = ''
                                        var sectionExists = this.pageData.selectItemArray.some(item => item.section === sections[i].name);

                                        if (!sectionExists) {
                                                this.pageData.selectItemArray.push({
                                                section: sections[i].name,
                                                id: info+sections[i].groups[m].components[j].description,
                                                name: sections[i].groups[m].components[j].description,
                                                quantity: sections[i].groups[m].components[j].quantity,
                                                collection_name:sections[i].collection_name
                                            });

                                        }else{
                                            this.pageData.selectItemArray.push({
                                                section: '',
                                                id: info+sections[i].groups[m].components[j].description,
                                                name: sections[i].groups[m].components[j].description,
                                                quantity: sections[i].groups[m].components[j].quantity,
                                                collection_name:sections[i].collection_name
                                            });

                                        }
                                        sectionCollectionName.push(sections[i].collection_name)
                                        section_name.push(sections[i].name)

                                    }
                                    

                                    
                                

                                }
                            }
                            
                        }
                    }
                }
                
                var index = sectionCollectionName.lastIndexOf('Main Storage')

                if(rear_dirve_info.length>0){
                    rear_dirve_info.map((item,idx)=>{
                        this.pageData.selectItemArray.splice( index+1+idx, 0,item);
                    })
                }

                if(section_name.indexOf('SAS Raid Controller') == -1){
                    this.pageData.showQuoteUs = true
                }else{
                    this.pageData.showQuoteUs = false
                }
                
                accessories.forEach(item => {
                    if (map.hasOwnProperty(item.sku)) {
                        map[item.sku].quantity += item.quantity;
                    } else {
                        map[item.sku] = { ...item }; // 使用展开运算符复制对象
                    }
                });

                if(this.pageData.raidcontrollerSection != ""){
                    this.pageData.formData.sections[this.pageData.raidcontrollerSection].errors.map(item=>{
                        if(item.id == 3){
                            this.pageData.pcieError  = item.active
                        }
                    })
                }

                Object.values(map);

                this.pageData.accessories = map

            
                
                this.pageData.selectItemArray.push({
                    section: "Warranty",
                    name: this.pageData.warPick.description,
                    quantity: 1,
                    id:this.pageData.warPick.description,
                });
                
            },

            /**
                * @description Calculate the price of BOM
                * @param {String} init:If there is an init field, you need to return some price, etc
                * @returns {Array} final_price,selectItemArray,curPrice,etc
            */
            totalPrice(init = null) {
                

                //Calculate the init price of BOM and prices other than warranty
                this.pageData.totalPrice = this.pageData.init_price;
                var nowTotalPriceDefault = this.pageData.originalInitPrice;
                for (var i = 0; i < this.pageData.selectSection.length; i++) {
                    this.pageData.totalPrice = this.pageData.totalPrice + this.pageData.selectSection[i];
                    nowTotalPriceDefault = nowTotalPriceDefault + parseFloat(this.pageData.selectSectionDefault[i]);
                }
                this.pageData.totalPriceDefault = Math.round(parseFloat(nowTotalPriceDefault));

                //get the price of warranty through checkWarranty ()
                const returnWarranty = checkWarranty(
                    this.pageData.formData,
                    this.pageData.warPick,
                    this.pageData.curPrice,
                    this.pageData.totalPrice,
                    this.pageData.accessory_define_cost,
                    this.pageData.customerGp
                );
                const returnWarrantyDefault = checkWarranty(
                    this.pageData.formData,
                    this.pageData.warPick,
                    this.pageData.curPrice,
                    this.pageData.totalPrice,
                    this.pageData.accessory_define_cost,
                    this.pageData.customerGp
                
                );
                this.pageData.formData.warrantyList= returnWarranty[0];
                this.pageData.curPrice = returnWarranty[1];
                this.pageData.formData.warrantyCurrentPrice= returnWarranty[2];
                this.pageData.warPick = returnWarranty[3];

                this.pageData.AssemblyPrice = this.pageData.totalPrice  * this.pageData.formData.assembly_rate > this.pageData.formData.min_assembly_cost ? this.pageData.totalPrice  * this.pageData.formData.assembly_rate : this.pageData.formData.min_assembly_cost

                this.pageData.AssemblyPrice = this.pageData.AssemblyPrice / (1-this.pageData.formData.gp)
                

                // console.log('this.pagedata-------',this.pageData)

                //Calculate the total price of BOM, init price+totalPrice+warrantyCurrentPrice
                if (this.pageData.beforeCheck == true) {
                    this.pageData.finalPrice = formatFinalPrice(this.pageData.totalPrice, this.pageData.formData.warrantyCurrentPrice,this.pageData.AssemblyPrice)
                    this.pageData.finalPriceDefault = formatFinalPrice(this.pageData.totalPriceDefault, returnWarrantyDefault.curPrice,this.pageData.AssemblyPrice)
                } else {
                    this.pageData.finalPrice = parseInt(Math.round(this.pageData.totalPrice) + ".00");
                    this.pageData.finalPriceDefault = parseInt(Math.round(this.pageData.finalPriceDefault.toFixed(2)));
                }
                this.pageData.finalPrice = parseFloat( this.pageData.finalPrice).toFixed(2);
                this.pageData.finalPriceDefault = Math.round( this.pageData.finalPriceDefault).toFixed(2);
                this.newSelectItemArray()
                console.log(this.pageData.totalPrice,'组件总价',this.pageData.AssemblyPrice,'AssemblyPrice，',this.pageData.formData.warrantyCurrentPrice,'warranty price',this.pageData.selectSection,'硬件价格')
                if (init != null) {
                    // this.pageData.init = true
                    return pageData.finalPrice
                }
                
            },

            /**
                * @description Radio modification
                * @param {Number} sectionIndex: The sequence number of the currently selected section
                * @param {Object} sect:Currently selected sect
                * @param {Object} group:Currently selected group
                * @param {Object} single:Currently selected single
            */
            otherComponentSelect( sectionIndex,section,group,single) {
                if(single.count == 0){
                    if(section.min != 0){
                        single.quantity = section.min
                    }else{
                        single.quantity = section.step
                    }
                }
                
                // Clear all single states under the current section to false, counts, etc
                this.pageData.formData.sections[sectionIndex].groups.map((groupItem, groupIdx) => {
                    groupItem.checkNum = 0
                    this.pageData.formData.sections[sectionIndex].finalNum = 0
                    groupItem.components.map((singleItem,singleIndex) => {
                        if( singleItem.is_checked == true){
                          
                
                            singleItem.is_checked = false
                            singleItem.count = 0
                            this.groupItemSelect( sectionIndex, section, groupItem, singleItem);
                           
                        }
                        singleItem.is_checked = false
                        
                        return singleItem
                    })
                })
                
                // Set the status of currently selected single to true

                group.components.map((singleItem,singleIndex) => {
                    if(singleItem.component_id == single.component_id){
                        
                        singleItem.is_checked = true
                        singleItem.count = 1
                        this.groupItemSelect( sectionIndex, section, group, singleItem);
                       
                    }
                    else{
                        singleItem.count = 0
                    }
                })

                
                
                // pageData.formData.sections[sectionIndex].groups[groupIndex].components[singleIndex].is_checked = true;
            },

            /**
                * @description Modify the number of drop-down menus, modify the options
                * @param {Number} sectionIndex: The sequence number of the currently selected section
                * @param {Object} sect:Currently selected sect
                * @param {Object} group:Currently selected group
                * @param {Object} single:Currently selected single
                * @param {String} category_name:The type name of the current section
            
            
            */
            groupNumberSelect(sectionIndex,sect,group,single,category_name) {
                // If the content is not selected, modify the drop-down number to select on
                var init_checked = single.is_checked
                if (single.is_checked == false) {
                    single.count = single.count + 1;
                    if (single.count == 1) {
                        single.is_checked = true;
                        if(category_name != 'ram' && category_name != 'cpu'){
                            // Multiple selection processing
                            this.groupItemSelect(sectionIndex,sect,group,single);
                        }else{
                            // Single option processing
                            // otherComponentSelect(sectionIndex,sect,group,single)
                            
                        }   
                    
                        // sect.minimum_quantity = single.quantity
                
                    }
                }
            
                // Recalculate the number selected under the current group
                group.checkNum = 0;
                for (var i = 0; i < group.components.length; i++) {
                    if (group.components[i].is_checked == true) {
                        group.checkNum += Number(group.components[i].quantity);
                    }
                }
                // Recalculate the number selected under the current section
                sect.finalNum = 0;
                for (var i = 0; i < sect.groups.length; i++) {
                    sect.finalNum += Number(sect.groups[i].checkNum);
                }
                sect.percent = parseInt((sect.finalNum / sect.max) * 100);
                if(sect.percent>100){
                    sect.percent = 100
                }

                if (single.is_checked == true) {
                    // If the selected content is cpu or ram, the specific content is assigned a value, 
                    // which is mainly used to show the price difference of other content in the selected section
                
                    if (sect.category_name == 'cpu') {
                        pageData.cpuDefaultPrice = single.quantity * single.price;
                        sect.cpuDefaultPrice = single.quantity * single.price;
                    } else if(sect.category_name == 'ram') {
                        pageData.ramDefaultPrice = single.quantity * single.price;
                        sect.ramDefaultPrice = single.quantity * single.price;

                    }

                    // Records the number selected in the current section
                
                    sect.selectNumber += single.quantity - single.pre_quantity_select;
                            // When section is drive and single is sas, record the number of selected sas packets for error verification
                    if(sect.category_name == 'drive'  ){
                        single.support_type = single.attributes.find((x) => x.attribute_code=="platform_type").value
                        if(single.support_type == 'sas'){
                            pageData.sasTotalCheked+= Number(single.quantity) - single.pre_quantity_select;
                        }else{
                            pageData.sataTotalCheked+=  Number(single.quantity)  - single.pre_quantity_select;
                        }
                    }
            
                    if (sect.categoty_name == 'drive' || sect.categoty_name == 'nvme') {
                        pageData.warrantyDriveChecking +=
                        single.quantity - single.pre_quantity_select;
                    }
                    var seItemArray = {
                        quantity:0
                    };
                
                    // When the collection name of the section is main storage, 
                    // record the number of selected bays for subsequent error verification
                    if(sect.collection_name && sect.collection_name == 'Main Storage'){
                        pageData.occupy_bays_number = pageData.occupy_bays_number - single.pre_quantity_select + Number(single.quantity)
                        sect.baysNum = pageData.formData.front_max_drives - pageData.occupy_bays_number + sect.finalNum
                        sect.occupy_bays_number = pageData.occupy_bays_number 
                        
                        pageData.baysNumberPercent = parseInt((pageData.occupy_bays_number / pageData.formData.front_max_drives) * 100);
                        sect.total_bays_num_percent = pageData.baysNumberPercent
                        if(sect.finalNum == 0){
                            sect.storage_bays_percent  = 0
                        }else{
                            sect.storage_bays_percent = parseInt((sect.finalNum / ChangeTabBayNum(sect.min, sect.max,sect.baysNum, sect.step,sect.finalNum)) * 100);
                        }
                    }


                    // Record the total price and cost etc. selected under the current section
                    var num = pageData.mainParts.length
                    pageData.selectSection[sectionIndex + num] += (single.quantity - single.pre_quantity_select) * single.price;
                   
                    if (single.price_copy == undefined) {
                        single.price_copy = single.price;
                    }

                    pageData.selectSectionDefault[sectionIndex + num] +=(single.quantity - Number(single.pre_quantity_select)) * single.price_copy;
                    single.pre_quantity_select = single.quantity;
                
                    // If the current section has subsections, and deselect, modify the selected status in the subsection, and the price calculation is cleared
                    if (sect.finalNum== 0) {
                        var select_name = []
                        if (sect.children_ids && sect.children_ids.length > 0 && sect.finalNum== 0) {
                            sect.children_ids.map(child => {
                                pageData.formData.sections.map((sectItem, i) => {
                                    if (child == sectItem.section_id) {
                                        sectItem.is_active = false
                                        sectItem.selectNumber = 0
                                        sectItem.selectGroup = []
                                        sectItem.finalNum = 0
                                        sectItem.percent = parseInt((sectItem.finalNum / sectItem.max) * 100);
                                        if(sectItem.category_name == 'raid controller'  && sectItem.name != 'SAS Raid Controller'){
                                            pageData.nvme_raid_controller_number  = 0
                                        }
                                        sectItem.groups.map((groupItem, groupIds) => {
                                            groupItem.count = 0
                                            groupItem.checkNum = 0
                                            groupItem.components.map((singleItem, singleIds) => {
                                            singleItem.is_checked = false
                                            singleItem.count = 0
                                            return singleItem
                                            })
                                            return groupItem
                                        })
                                        
                                    }
                                })
                            })
                            var num = pageData.mainParts.length
                            pageData.selectSection[sectionIndex + num + 1] = 0
                            pageData.selectSectionDefault[sectionIndex + num + 1] = 0
                        }
                    }

                    // If the current section has subsections, and select, show the content of the subsection
                    if (sect.is_active && sect.children_ids && sect.finalNum>0) {
                    
                        sect.children_ids.map(child => {
                            pageData.formData.sections.map(sectItem => {
                                if (child == sectItem.section_id) {
                                    sectItem.is_active = true
                                
                                }
                                
                                return sectItem
                            
                            })


                        })
                    }

                    if (sect.category_name == 'drive'   && sect.name != "M.2 BootDrive") {
                        this.storageSetUp()
                        this.raidControllerSetUp()
                    }
                    if(sect.category_name == 'raid controller'){
                        this.raidControllerSetUp()
                        this.storageSetUp()
                    }
                    if(init_checked == true){
                        var checking = this.checkError(sect,single,2);
                    }
                    this.totalPrice('init11');
                    if ((single.support_type == '3' || single.support_type == '4') && sect.finalNum > 0) {
                        checkedRaidController = true
                    }
                    
                }
               
                

            },

            /**
                * @description Select a single
                * @param {Number} sectionIndex: The sequence number of the currently selected section
                * @param {Object} sect:Currently selected sect
                * @param {Object} group:Currently selected group
                * @param {Object} single:Currently selected single
            */
            groupItemSelect(sectionIndex,sect,group,single,radioButtonSelection) {
                
                    if (
                    (sect.category_name == 'cpu' || sect.category_name == 'ram') && radioButtonSelection == null
                    ) {
                        if (single.is_checked == true) {
                            if(sect.category_name == 'cpu'){
                                this.pageData.cpuDefaultPrice = single.quantity * single.price;
                                this.pageData.cpu = single.component_id;
                                sect.cpu = single.component_id;
                                sect.radioType = single.component_id;
                                sect.cpuDefaultPrice = single.quantity * single.price
                            }else{
                                this.pageData.ramDefaultPrice = single.quantity * single.price;
                                this.pageData.ram = single.component_id;
                                sect.ram = single.component_id;
                                sect.radioType = single.component_id;
                                sect.ramDefaultPrice = single.quantity * single.price

                            
                            }
                        
                            
                        } 
                        // console.log("groupItemSelect========",this.pageData.ram,this.pageData.cpuDefaultPrice ,this.pageData.ramDefaultPrice,8888881111)

                    }

                    if (sect.category_name == 'drive' && sect.name != "M.2 BootDrive") {
                        this.storageSetUp()
                    }
                    if(sect.category_name == 'raid controller'){
                        this.raidControllerSetUp()
                    }

                    var num = this.pageData.mainParts.length


                    if (single.is_checked == true) {
                        
                        //  When section is drive and single is sas, record the number of selected sas packets for error verification


                        if(sect.category_name == 'drive' ){
                            single.support_type = single.attributes.find((x) => x.attribute_code=="platform_type").value
                            console.log(single.support_type,'single.support_typesingle.support_type')
                            if(single.support_type == 'sas'){
                                this.pageData.sasTotalCheked+=Number(single.quantity)
                            }else{
                                this.pageData.sataTotalCheked+=Number(single.quantity)
                            }
                        }

                        // Recalculate the number selected under the current group

                        group.count = group.count + 1;
                        if(sect.category_name == 'cpu' || sect.category_name == 'ram'){
                            group.checkNum = Number(single.quantity)
                        }else{
                            group.checkNum = Number(group.checkNum) +Number(single.quantity);
                        }

                        if(sect.category_name == 'gpu' || sect.category_name == 'raid controller' || sect.category_name == 'nic'){
                            
                            single.form_factor = single.attributes.find((x) => x.attribute_code == "form_factor").value
                            single.pcie_speed = single.attributes.find((x) => x.attribute_code == "pcie_speed").value
                            single.pcie_slot_width = single.attributes.find((x) => x.attribute_code == "pcie_slot_width").value
                            
                        }
                        // Recalculate the number selected under the current section
                        sect.finalNum = 0;
                        for (var i = 0; i < sect.groups.length; i++) {
                            sect.finalNum += sect.groups[i].checkNum;
                        }
                        sect.percent = parseInt((sect.finalNum / sect.max) * 100);
                        if(sect.percent>100){
                            sect.percent = 100
                        }
                        if (single.price_copy == undefined) {
                            single.price_copy = single.price;
                        }
                        
                        single.pre_quantity_select = single.quantity;
                        this.pageData.selectSection[sectionIndex + num] += (single.quantity > 0 ? single.quantity : 0) * single.price;
                        this.pageData.selectSectionDefault[sectionIndex + num] += (single.quantity > 0 ? single.quantity : 0) * single.price_copy;
                        // console.log(this.pageData.selectSectionDefault[sectionIndex + num],(single.quantity > 0 ? single.quantity : 0) * single.price_copy,this.pageData.selectSectionDefault,single,single.quantity,single.price,single.define_cost,single.price_copy,sectionIndex,'jjjjjjjjj')
                        // console.log(this.pageData.selectSectionDefault[sectionIndex + num],2333333)
                       
                        // record the number of selected bays for subsequent error verification

                        if(sect.collection_name && sect.collection_name == 'Main Storage'){
                            this.pageData.occupy_bays_number += Number(single.quantity)
                            sect.baysNum = this.pageData.formData.front_max_drives - this.pageData.occupy_bays_number + sect.finalNum
                            
                            sect.occupy_bays_number = this.pageData.occupy_bays_number 
                            
                            this.pageData.baysNumberPercent = parseInt((this.pageData.occupy_bays_number / this.pageData.formData.front_max_drives) * 100);
                            sect.total_bays_num_percent = this.pageData.baysNumberPercent
                            if(sect.finalNum == 0){
                                sect.storage_bays_percent  = 0
                            }else{
                                sect.storage_bays_percent = parseInt((sect.finalNum / ChangeTabBayNum(sect.min, sect.max,sect.baysNum, sect.step,sect.finalNum)) * 100);
                            }
                        }

                    } else {
                        if (single.price_copy == undefined) {
                            single.price_copy = single.price;
                        }
                        if(sect.category_name == 'cpu' || sect.category_name == 'ram'){
                            group.checkNum = single.quantity
                            group.checkNum = 0
                        }else{
                            group.checkNum = group.checkNum - single.quantity;
                        }
                    
                        single.count = 0;
                        sect.finalNum = 0;
                        for (var i = 0; i < sect.groups.length; i++) {
                            sect.finalNum += sect.groups[i].checkNum;
                        }
                        sect.percent = parseInt((sect.finalNum / sect.max) * 100);
                        if(sect.percent>100){
                            sect.percent = 100
                        }
                        this.pageData.selectSection[sectionIndex + num] -= (single.quantity > 0 ? single.quantity : 0) * single.price;
                        this.pageData.selectSectionDefault[sectionIndex + num] -= (single.quantity > 0 ? single.quantity : 0) * single.price_copy;
                        
                        if(sect.category_name == 'drive'  ){
                            single.support_type = single.attributes.find((x) => x.attribute_code=="platform_type").value
                            if(single.support_type == 'sas'){
                                this.pageData.sasTotalCheked-=Number(single.quantity)
                            }else{
                                this.pageData.sataTotalCheked-=Number(single.quantity)
                            }
                        }

                        // console.log(this.pageData.selectSectionDefault[sectionIndex + num],888888777)
                        

                        if(sect.collection_name && sect.collection_name == 'Main Storage'){
                            this.pageData.occupy_bays_number = this.pageData.occupy_bays_number- Number(single.quantity)
                            sect.baysNum = this.pageData.formData.front_max_drives - this.pageData.occupy_bays_number + sect.finalNum
                            sect.occupy_bays_number = this.pageData.occupy_bays_number 
                            
                            this.pageData.baysNumberPercent = parseInt((this.pageData.occupy_bays_number / this.pageData.formData.front_max_drives) * 100);
                            sect.total_bays_num_percent = this.pageData.baysNumberPercent
                            if(sect.finalNum == 0){
                                sect.storage_bays_percent  = 0
                            }else{
                                sect.storage_bays_percent = parseInt((sect.finalNum / ChangeTabBayNum(sect.min, sect.max,sect.baysNum, sect.step,sect.finalNum)) * 100);
                            }
                            console.log(this.pageData.occupy_bays_number ,sect.finalNum)
                        }


                    
                    }

                    if (sect.is_active && sect.children_ids && sect.finalNum>0) {
                    
                        sect.children_ids.map(child => {
                            this.pageData.formData.sections.map(sectItem => {
                                if (child == sectItem.section_id) {
                                    sectItem.is_active = true
                                
                                }
                                
                                return sectItem
                            
                            })


                        })
                    }
                    
                    if( sect.category_name == 'raid controller'  && sect.name == 'NVMe Raid Controller'){
                        this.pageData.nvme_raid_controller_number = sect.finalNum
                        
                    }   
                
                    // Synchronize some of the record data in the selected section into the collectionSection

                    this.pageData.collectionSection.map(item=>{

                        if(item.collection_name == 'Main Storage'){
                            item.section.map((section,idx)=>{
                                section.occupy_bays_number = this.pageData.occupy_bays_number
                                section.total_bays_num_percent = this.pageData.baysNumberPercent
                                if(section.name == sect.name){
                                    section.baysNum = sect.baysNum
                                    section.finalNum = sect.finalNum
                                    section.total_bays_num_percent = this.pageData.total_bays_num_percent
                                    section.storage_bays_percent  =  sect.storage_bays_percent
                                }
                                
                                
                            })
                            
                        }
                    
                })
                if (radioButtonSelection == null) {
                    this.checkError(sect,single,1)
                }
                    this.totalPrice('init44');

               
                
                    // console.log(single.is_checked,single.count,group.checkNum,group.name,pageData.finalPrice,"1111checkerror is checked---")

                
            },


            addItemQuantity(sectionIndex,sect,group,single){
                var num = this.pageData.mainParts.length
                var init_checked = single.is_checked
                var check = true
                if (single.is_checked == false) {
                    single.count = single.count + 1;
                    if (single.count == 1) { 
                        single.is_checked = true;
                        if(sect.category_name != 'ram' && sect.category_name != 'cpu'){
                            // Multiple selection processing
                            single.quantity = sect.step
                            this.groupItemSelect(sectionIndex,sect,group,single);
                            check = false
                        }else{
                            // Single option processing
                            if(sect.max != sect.finalNum){
                                this.otherComponentSelect(sectionIndex,sect,group,single)
                            }
                            
                            
                            
                            
                        }   
                    
                        // sect.minimum_quantity = single.quantity
                
                    }
                }
                var final_num = sect.finalNum + sect.step;
               

                
                
                if(single.is_checked == true){

                    if(check ==  false){
                        single.quantity = single.quantity - sect.step
                        sect.finalNum -=  sect.step
                        group.checkNum -= sect.step
                      
                    }
                    if (sect.category_name == 'cpu') {
                        pageData.cpuDefaultPrice = single.quantity * single.price;
                        sect.cpuDefaultPrice = single.quantity * single.price;
                    } else if(sect.category_name == 'ram') {
                        pageData.ramDefaultPrice = single.quantity * single.price;
                        sect.ramDefaultPrice = single.quantity * single.price;

                    }
                    
                    if(sect.category_name != 'cpu' && sect.category_name != 'ram'){

                        if(sect.collection_name != 'Main Storage'){
                            var max_num = initSingleQuantity(sect.min, sect.max, final_num,sect.step,single)[1]
                        }else{
                            var max_num = initSingleQuantity(sect.min,ChangeTabBayNum(sect.min, sect.max,sect.baysNum, sect.step,sect.finalNum),final_num,sect.step,single)
                        }
                        

                        if(single.quantity < max_num || sect.finalNum < sect.max){

                            single.quantity = Number(single.quantity) + Number(sect.step)
                            sect.finalNum += Number(sect.step) 
                            group.checkNum += Number(sect.step) 
                        }else{
                            single.quantity+=0
                            sect.finalNum += 0
                        }
                        
                    }else{
                        
                        if(single.quantity < sect.max ){
                            single.quantity = single.quantity + Number(sect.step) 
                            sect.finalNum = single.quantity
                           
                           
                            
                        }else if(sect.finalNum == sect.max){
                            single.quantity+=0
                        }
                        getBaseNumRadio(single.quantity,sect.max,sect.step,single)
                    }
                    
                    if (single.price_copy == undefined) {
                        single.price_copy = single.price;
                    }
                    if(sect.category_name == 'drive'  ){
                        single.support_type = single.attributes.find((x) => x.attribute_code=="platform_type").value
                        if(single.support_type == 'sas'){
                            pageData.sasTotalCheked+= Number(single.quantity) - single.pre_quantity_select;
                        }else{
                            pageData.sataTotalCheked+=  Number(single.quantity)  - single.pre_quantity_select;
                        }
                    }

                    if(sect.collection_name && sect.collection_name == 'Main Storage'){
                        pageData.occupy_bays_number = pageData.occupy_bays_number - single.pre_quantity_select + Number(single.quantity)
                        sect.baysNum = pageData.formData.front_max_drives - pageData.occupy_bays_number + sect.finalNum
                        sect.occupy_bays_number = pageData.occupy_bays_number 
                        
                        pageData.baysNumberPercent = parseInt((pageData.occupy_bays_number / pageData.formData.front_max_drives) * 100);
                        sect.total_bays_num_percent = pageData.baysNumberPercent
                        if(sect.finalNum == 0){
                            sect.storage_bays_percent  = 0
                        }else{
                            sect.storage_bays_percent = parseInt((sect.finalNum / ChangeTabBayNum(sect.min, sect.max,sect.baysNum, sect.step,sect.finalNum)) * 100);
                        }
                    }


                   
                    
                    this.pageData.selectSection[sectionIndex + num] += (single.quantity - single.pre_quantity_select) * single.price;
                    this.pageData.selectSectionDefault[sectionIndex + num] +=(single.quantity - Number(single.pre_quantity_select)) * single.price_copy;
                   
                    single.pre_quantity_select = single.quantity;
                    
                        
                    this.totalPrice('init44');

                    if (sect.category_name == 'drive'   && sect.name != "M.2 BootDrive") {
                        this.storageSetUp()
                        this.raidControllerSetUp()
                    }
                    if(sect.category_name == 'raid controller'){
                        this.raidControllerSetUp()
                        this.storageSetUp()
                    }

                    if (sect.is_active && sect.children_ids && sect.finalNum>0) {
                        
                        sect.children_ids.map(child => {
                            pageData.formData.sections.map(sectItem => {
                                if (child == sectItem.section_id) {
                                    sectItem.is_active = true
                                
                                }
                                
                                return sectItem
                            
                            })


                        })
                    }
                    if(init_checked == true){
                        var checking = this.checkError(sect,single,2);
                    }
                }
                
                
            },

            cancelItemQuantity(sectionIndex,sect,group,single){
                var num = this.pageData.mainParts.length
                var init_checked = single.is_checked
                if(single.is_checked == true){
                    var final_num = sect.finalNum - sect.step;
                    
                    single.pre_quantity_select = single.quantity;
                    
                   
                    if (sect.category_name == 'cpu') {
                        pageData.cpuDefaultPrice = single.quantity * single.price;
                        sect.cpuDefaultPrice = single.quantity * single.price;
                    } else if(sect.category_name == 'ram') {
                        pageData.ramDefaultPrice = single.quantity * single.price;
                        sect.ramDefaultPrice = single.quantity * single.price;

                    }
                    
                    

                    var max_num = initSingleQuantity(sect.min, sect.max, sect.finalNum,sect.step,single)[1]
                    
                    if(sect.category_name != 'cpu' && sect.category_name != 'ram'){
                        if(single.quantity > 0 && sect.finalNum != 0){
                            single.quantity -= Number(sect.step)
                            sect.finalNum -= sect.step;
                    
                            group.checkNum -= sect.step;
                            if(single.quantity == 0 ){
                                single.is_checked = false
                                single.count = 0
                            } 
                        }
                    }else{
                        if(single.quantity > 0 ){
                            single.quantity -= Number(sect.step)
                            sect.finalNum = single.quantity ;
                            group.checkNum = single.quantity ;
                            if(single.quantity == 0 ){
                                single.is_checked = false
                                single.count = 0
                            } 
                        }else if(single.quantity == sect.max){
                            single.quantity += 0
                        }
                    }
                    

                    if (single.price_copy == undefined) {
                        single.price_copy = single.price;
                    }

                    if(sect.collection_name && sect.collection_name == 'Main Storage'){
                        pageData.occupy_bays_number = pageData.occupy_bays_number - single.pre_quantity_select + Number(single.quantity)
                        sect.baysNum = pageData.formData.front_max_drives - pageData.occupy_bays_number + sect.finalNum
                        sect.occupy_bays_number = pageData.occupy_bays_number 
                        
                        pageData.baysNumberPercent = parseInt((pageData.occupy_bays_number / pageData.formData.front_max_drives) * 100);
                        sect.total_bays_num_percent = pageData.baysNumberPercent
                        if(sect.finalNum == 0){
                            sect.storage_bays_percent  = 0
                        }else{
                            sect.storage_bays_percent = parseInt((sect.finalNum / ChangeTabBayNum(sect.min, sect.max,sect.baysNum, sect.step,sect.finalNum)) * 100);
                        }
                    }

                    if(sect.category_name == 'drive'  ){
                        single.support_type = single.attributes.find((x) => x.attribute_code=="platform_type").value
                        if(single.support_type == 'sas'){
                            pageData.sasTotalCheked+= Number(single.quantity) - single.pre_quantity_select;
                        }else{
                            pageData.sataTotalCheked+=  Number(single.quantity)  - single.pre_quantity_select;
                        }
                    }

                    console.log(single.quantity, single.pre_quantity_select,' single.pre_quantity_select single.pre_quantity_select single.pre_quantity_select')
                    
                    this.pageData.selectSection[sectionIndex + num] += (single.quantity - single.pre_quantity_select) * single.price;
                    this.pageData.selectSectionDefault[sectionIndex + num] +=(single.quantity - Number(single.pre_quantity_select)) * single.price_copy;
                    
                    
                    single.pre_quantity_select = single.quantity;


                    if (sect.finalNum== 0) {
                        var select_name = []
                        if (sect.children_ids && sect.children_ids.length > 0 && sect.finalNum== 0) {
                            sect.children_ids.map(child => {
                                pageData.formData.sections.map((sectItem, i) => {
                                    if (child == sectItem.section_id) {
                                        sectItem.is_active = false
                                        sectItem.selectNumber = 0
                                        sectItem.selectGroup = []
                                        sectItem.finalNum = 0
                                        sectItem.percent = parseInt((sectItem.finalNum / sectItem.max) * 100);
                                        if(sectItem.category_name == 'raid controller'  && sectItem.name != 'SAS Raid Controller'){
                                            pageData.nvme_raid_controller_number  = 0
                                        }
                                        sectItem.groups.map((groupItem, groupIds) => {
                                            groupItem.count = 0
                                            groupItem.checkNum = 0
                                            groupItem.components.map((singleItem, singleIds) => {
                                            singleItem.is_checked = false
                                            singleItem.count = 0
                                            return singleItem
                                            })
                                            return groupItem
                                        })
                                        
                                    }
                                })
                            })
                            var num = pageData.mainParts.length
                            pageData.selectSection[sectionIndex + num + 1] = 0
                            pageData.selectSectionDefault[sectionIndex + num + 1] = 0
                        }
                    }
                
                    this.totalPrice('init44');
                    if (sect.category_name == 'drive'   && sect.name != "M.2 BootDrive") {
                        this.storageSetUp()
                        this.raidControllerSetUp()
                    }
                    if(sect.category_name == 'raid controller'){
                        this.raidControllerSetUp()
                        this.storageSetUp()
                    }
                    if(init_checked == true){
                        var checking = this.checkError(sect,single,2);
                    }
                }

                

                

                
                

            },







            /**
                * @description Modify the warranty options and make price calculation changes
                * @param {Object} item:warranty item
            */
            warrantyChange(item){
                this.pageData.warPick = item
                // Set the current click status to true, the rest to false
                this.pageData.formData.warranties.map(war => {
                    if(war.sku == item.sku){
                        war.is_checked = true
                    }
                    else{
                        war.is_checked = false

                    }
                    return war
                })

                // Also sync the updated warranty option to the selected status bar shown on the right
                for (var i = 0; i < this.pageData.selectItemArray.length; i++) {
                    if (this.pageData.selectItemArray[i].section === "Warranty") {
                        this.pageData.selectItemArray.splice(i, 1);
                    }
                }
                this.pageData.selectItemArray.push({
                    section: "Warranty",
                    name: item.description,
                    quantity: 1,
                    id: item.description,
                });
                
                    
                // Recalculate price
                this.totalPrice();
                
            },

            changeShowStorage(item,type){
                item.IsShowStorageType = type
            },

            /**
                * @description Get data of the raid controller
            */
            raidControllerSetUp(){
                this.pageData.SocRaid = []
                this.pageData.raidControllerSelected = []
                this.pageData.raid = []


                var sections = this.pageData.formData.sections

                for (var i = 0; i < sections.length; i++) {
                    if (sections[i].category_name == 'raid controller'   && sections[i].name == "SAS Raid Controller" ) {
                        for (var j = 0; j < sections[i].groups.length; j++) {
                            for (var m = 0; m < sections[i].groups[j].components.length; m++) {
                                if (sections[i].groups[j].components[m].is_checked == true && sections[i].groups[j].components[m].quantity>0) {
                                        sections[i].groups[j].components[m].raid_types = this.pageData.formData.raid_types
                                    // if (sections[i].category_name == 'drive'   && sections[i].name != "M.2 BootDrive" &&  sections[i].name != "Rear BootDrive") {
                                        var raidController = {
                                            quantity: sections[i].groups[j].components[m].quantity,
                                            raid: sections[i].groups[j].components[m],
                                            name: sections[i].groups[j].components[m].description,
                                            image_url: sections[i].image_url,
                                            has_hot_swap: false,
                                            has_volume: false,
                                            drives: [],
                                            type: 2,
                                            hot_swap: "",
                                        };
                                    
                                        this.pageData.raid.push(raidController);
                                }
                            }
                        }
                    }
                }

                this.pageData.raidControllerSelected = this.pageData.SocRaid.concat(this.pageData.raid)
            

            } ,
            
            /**
                * @description Get data of the storage drive
            */
            storageSetUp(){
                var sasCheck = true
                this.pageData.sasDrive = 0
                this.pageData.storage = []
                this.pageData.storageNvme = []
            
                var sections = this.pageData.formData.sections

                for (var i = 0; i < sections.length; i++) {
                    if (sections[i].category_name == 'drive'   && sections[i].name != "M.2 BootDrive" &&  sections[i].name != "Rear BootDrive") {
                        for (var j = 0; j < sections[i].groups.length; j++) {
                            for (var m = 0; m < sections[i].groups[j].components.length; m++) {
                                if (sections[i].groups[j].components[m].is_checked == true && sections[i].groups[j].components[m].quantity>0) {
                                    
                                    // if (sections[i].category_name == 'drive'   && sections[i].name != "M.2 BootDrive" &&  sections[i].name != "Rear BootDrive") {
                                        var driveSect = {
                                            id: sections[i].groups[j].components[m].name,
                                            quantity: Number(sections[i].groups[j].components[m].quantity),
                                            drive: sections[i].groups[j].components[m],
                                            name: sections[i].groups[j].components[m].description,
                                            image_url: sections[i].image_url,
                                            type: sections[i].category_name
                                        };
                                    
                                        this.pageData.storage.push(driveSect);

                                
                                }
                            }
                        }
                    }
                }
            
                this.pageData.driveSelected = this.pageData.storage
                // this.pageData.raidControllerSelected = []
                // this.raidControllerSetUp()

            },
            
            /**
                * @description Close the pop-up window for volume sign
            */
            closeVolume(){
                this.pageData.show_volume_dialog = false
                this.updateProduct()
            },
            /**
                * @description Close the pop-up window for HotSpare
            */
            closeHotSpareDialog(){
                this.pageData.show_hot_spare_dialog = false
                this.updateProduct()
            },

        
            addHotSpare(drive, driveIndex){
                var HotIndex = 0
                this.pageData.driveSelected.forEach((item, index) => {
                    if (drive.name == item.name) {
                        HotIndex = index
                    }
                })

                if (
                    this.pageData.hotSwapData.hotSwapindex[driveIndex] == 0 ||
                    this.pageData.hotSwapData.hotSwapindex[driveIndex] == null
                ) {
                    // this.pageData.$message.error("select Quantity first");
                } else {
                    let rc = {
                        drive: drive,
                        quantity: this.pageData.hotSwapData.hotSwapindex[driveIndex],
                    };
                    this.pageData.hotSwapRC.hot_swap = rc;
                    this.pageData.hotSwapRC.has_hot_swap = true;
                    this.pageData.hotSwapData = {
                        hotSwapindex: [],
                    };
                    for (let i = 0; i < this.pageData.hotVolume.length; i++) {
                        this.pageData.hotSwapData.hotSwapindex.push(1)
                    }
                    if (this.pageData.driveSelected[driveIndex].quantity == rc.quantity) {
                        this.pageData.driveSelected.splice(HotIndex, 1);
                    } else {
                        this.pageData.driveSelected[HotIndex].quantity -= rc.quantity;
                        if (this.pageData.driveSelected[HotIndex].quantity == 0) {
                            this.pageData.driveSelected.splice(HotIndex, 1);
                        }
                    }
                    this.pageData.hotSwapRC = "";
                    this.pageData.show_hot_spare_dialog = false;
                }
                this.updateProduct()
            },

            removeHotSwap (raid) {
                var drvieRollBack = [];
                raid.has_hot_swap = false;
                var drive = raid.hot_swap.drive;
                var quantity = raid.hot_swap.quantity;
                if (this.pageData.driveSelected.length == 0) {
                    var driveSect = {
                        id: drive.id,
                        quantity: quantity,
                        drive: drive,
                        name: drive.name,
                        image_url: drive.image_url,
                        type: drive.type

                    };
                    this.pageData.driveSelected.push(driveSect);
                } else {
                    var driveCheck = this.pageData.driveSelected.find(
                        (x) => x.id === drive.id
                    );
                    if (driveCheck == null) {
                        var driveSect = {
                            id: drive.id,
                            quantity: quantity,
                            drive: drive,
                            name: drive.name,
                            image_url: drive.image_url,
                            type: drive.type
                        };
                        this.pageData.driveSelected.push(driveSect);
                    } else {
                        driveCheck.quantity += Number(quantity);
                    }
                }
                raid.hot_swap = "";
                    
            },

            removeVolumen (raid, radDrive, radDriveIndex) {
                var drvieRollBack = [];
                // var drive = radDrive.drive;
                var quantity = radDrive.quantity;
                if (this.pageData.driveSelected.length == 0) {
                    this.pageData.driveSelected = []
                    var driveSect = {
                        id: radDrive.drive.id,
                        quantity: quantity,
                        drive: radDrive.drive.drive,
                        name: radDrive.drive.name,
                        image_url: radDrive.drive.image_url,
                        type: radDrive.drive.type
                    };
                    this.pageData.driveSelected.push(driveSect);
                } else {
                    var total_driveSelected = this.pageData.driveSelected
                    this.pageData.driveSelected = []
                    this.pageData.driveSelected = total_driveSelected
                    var driveCheck = this.pageData.driveSelected.find(
                        (x) => x.id === radDrive.drive.id
                    );
                    console.log(this.pageData.driveSelected,radDrive,driveCheck,'this.pageData.driveSelectedthis.pageData.driveSelected')
                    if (driveCheck == null) {
                        var driveSect = {
                            id: radDrive.drive.id,
                            quantity: quantity,
                            drive: radDrive.drive.drive,
                            name: radDrive.drive.name,
                            image_url: radDrive.drive.image_url,
                            type: radDrive.drive.type
                        };
                        this.pageData.driveSelected.push(driveSect);
                    } else {
                        driveCheck.quantity += Number(quantity);
                    }
                }
                // raid.ports_left += quantity;
                raid.drives.splice(radDriveIndex, 1);
            },

            addVolumn(drive, driveIndex) {
                if (
                    this.pageData.volumeData.volume[driveIndex] == 0 ||
                    this.pageData.volumeData.volume[driveIndex] == null
                ) {
                    // this.$message.error("select Quantity first");
                } else {
                    let rc = {
                        drive: drive,
                        quantity: this.pageData.volumeData.volume[driveIndex],
                        raidType: 0,
                        raidMessage: "",
                        calMesaage: "",
                        errorMessage: "",
                    };
                    console.log(this.pageData.volumeRaid,'this.pageData.volumeRaidthis.pageData.volumeRaid')
                    this.pageData.volumeRaid.drives.push(rc)
                    // if (this.pageData.volumeRaid.type == 1) {
                    //     this.pageData.volumeRaid.ports_left = 4 - this.pageData.volumeData.volume[driveIndex];
                    // } else {
                    //     this.pageData.volumeRaid.ports_left =
                    //         this.pageData.volumeRaid.raid.port - this.pageData.volumeData.volume[driveIndex];
                    // }
                    this.pageData.volumeRaid.has_volume = true;
                    var driveCheck = this.pageData.driveSelected.find((x) => x.id === drive.id);
                    if (driveCheck.quantity == rc.quantity) {
                        // this.pageData.driveSelected.splice(driveIndex, 1);
                        this.pageData.driveSelected = this.pageData.driveSelected.filter((x) => {
                            return x.id !== drive.id;

                        });
                    } else {
                        driveCheck.quantity -= rc.quantity;
                    }
                    this.pageData.volumeData = {
                        volume: [],
                    }
                    for (let i = 0; i < this.pageData.driveVolume.length; i++) {
                        this.pageData.volumeData.volume.push(1)
                    }
                    this.pageData.volumeRaid = "";
                    this.pageData.show_volume_dialog = false
                }
                console.log(this.pageData.raidControllerSelected,'raidControllerSelectedraidControllerSelected')
                this.updateProduct()
            },

            /**
                * @description Open the pop-up window of the hot spare and display the data of the storage drive
            */
            showHotSpareDialog(raid){
            
                this.pageData.hotVolume = []
                if (this.pageData.driveSelected.length == 0) {
                    // this.pageData.$message.error("select Drive first");
                } else {
                    // if (raid.type == 1 || raid.raid.support_type == 1) {
                    //     for (let i = 0; i < this.pageData.driveSelected.length; i++) {
                    //         if (this.pageData.driveSelected[i].drive.platform_type == 1) {
                    //             this.pageData.hotVolume.push(this.pageData.driveSelected[i]);
                    //         }
                    //         if (this.pageData.driveSelected[i].drive.drive && this.pageData.driveSelected[i].drive.drive.platform_type == 1) {
                    //             this.pageData.hotVolume.push(this.pageData.driveSelected[i]);
                    //         }
                    //     }
                    // } else {
                    //     for (let i = 0; i < this.pageData.driveSelected.length; i++) {
                    //         if (raid.isNvme == "2" && this.pageData.driveSelected[i].type == 3) {
                    //             this.pageData.hotVolume.push(this.pageData.driveSelected[i]);
                    //         } else if ((raid.isNvme == "3" || raid.isNvme == "4") && this.pageData.driveSelected[i].type == 8) {
                    //             this.pageData.hotVolume.push(this.pageData.driveSelected[i]);
                    //         }

                    //     }
                    // }
                    for (let i = 0; i < this.pageData.driveSelected.length; i++) {
                        this.pageData.hotVolume.push(this.pageData.driveSelected[i]);
                    }
                    this.pageData.hotSwapData = {
                        hotSwapindex: [],
                    };
                    for (let i = 0; i < this.pageData.hotVolume.length; i++) {
                        this.pageData.hotSwapData.hotSwapindex.push(1)
                    }

                    this.pageData.hotSwapRC = raid;
                    console.log(this.pageData.hotVolume,'this.pageData.hotVolumethis.pageData.hotVolume')
                    if (this.pageData.hotVolume.length > 0) {
                        this.pageData.show_hot_spare_dialog = true;
                    } else {
                        this.pageData.show_hot_spare_dialog = false
                        // this.pageData.$message.error("Drive and Raid-Controller not match");
                    }
                }
                    this.updateProduct()
                    
        
            },
            /**
                * @description Open the pop-up window of the volume sign and display the data of the storage drive
            */
            showVolumeDialog(raid){
                this.pageData.driveVolume = [];
                this.pageData.volumeRaid = raid;
                if (this.pageData.driveSelected.length == 0) {
                    // this.$message.error("select Drive first");
                    console.log("select Drive first")
                }else{
                    for (let i = 0; i < this.pageData.driveSelected.length; i++) {
                        
                        this.pageData.driveVolume.push(this.pageData.driveSelected[i]);
                    }
                }
                if (this.pageData.driveVolume.length == 0) {
                    // this.$message.error("Drive and Raid-Controller not match");
                    console.log('Drive and Raid-Controller not match')

                } else {
                    this.pageData.show_volume_dialog = true
                    // this.volumeDialog = true;
                }
                this.pageData.volumeData = {
                    volume: []
                }
                for (let i = 0; i < this.pageData.driveVolume.length; i++) {
                    this.pageData.volumeData.volume.push(1)
                }
                this.updateProduct()
            },
            updateProduct(){
                return [this.pageData.show_volume_dialog,this.pageData.show_hot_spare_dialog]
            },
            alignRaidType (raid, drive) {
                drive.raidMessage = "";
                drive.calMesaage = "";
                drive.errorMessage = ""
                var selectRaidType = "";
                console.log(raid,'raidraidraidraid')

                if (raid.type == 1) {
                    selectRaidType = this.pageData.onBoardraidType.find(
                        (x) => x.type === drive.raidType
                    );
                } else {
                    selectRaidType = raid.raid.raid_types.find(
                        (x) => x.type === drive.raidType
                    );
                }
                console.log(selectRaidType,drive,'drivedrivedrivedrivedrive')
                if (Number(drive.quantity) < selectRaidType.require) {
                    drive.errorMessage = selectRaidType.error_message;
                } else {
                    var com = parseInt(drive.drive.drive.attributes.find((x) => x.attribute_code=="capacity").value);
                    // cal float has wrong
                    // var com = drive.drive.drive.compacity ? parseInt(drive.drive.drive.compacity) : parseInt(drive.drive.drive.capacity);

                    com = parseFloat(com / 1000).toFixed(2);
                    var fin = Math.floor(
                        this.evil(drive.quantity + selectRaidType.minus_quantity)
                    );
                    var cal = parseFloat(fin * com * selectRaidType.rate).toFixed(2);
                    drive.raidMessage = selectRaidType.message;
                    drive.calMesaage =
                        selectRaidType.type != "none" ? cal + "TB Useable" : "";
                }
                
            },
            evil(fn) {
                var Fn = Function; //一个变量指向Function，防止有些前端编译工具报错
                return new Fn("return " + fn)();
            },
        
            changeTab(item,tabIndex,tab){
                item.tabIndex = tabIndex
                tab.occupy_bays_number = this.pageData.occupy_bays_number
                // if(item.collection_name == 'Main Storage'){
                    
                    this.pageData.baysNumberPercent = parseInt((pageData.occupy_bays_number / pageData.formData.front_max_drives) * 100);

                    tab.total_bays_num_percent = this.pageData.baysNumberPercent
                
                    tab.baysNum = this.pageData.formData.front_max_drives - this.pageData.occupy_bays_number + tab.finalNum
                    if(tab.finalNum == 0){
                        tab.storage_bays_percent  = 0
                    }else{
                        tab.storage_bays_percent = parseInt((tab.finalNum / ChangeTabBayNum(tab.min, tab.max,tab.baysNum, tab.step,tab.finalNum)) * 100);
                    }

                //}
                
                
            },

            //Click on BootDrive to display the corresponding tab
            changeBootDrive(tabIndex,tab){
                this.pageData.bootDriveIndex = tabIndex
            },

            /**
                * @description Check whether the selected content is wrong
                * @param {Object} sect:Currently selected sect
                * @param {Object} single:Currently selected single
                * @param {Number} trigger:Single or multiple choice
            */
            checkError(sect,single,trigger) {
                var triggerCheck = 0;
                var triggerQuantity = 0;
                var totalFhPcie = 0
                var totalLPPcie = 0
            
                if (trigger == 1) {
                    triggerCheck = single.is_checked == true ? 1 : -1;
                    triggerQuantity = single.quantity;
                } else {
                    if (single.is_checked) {
                        triggerQuantity = single.quantity - single.pre_quantity_select;
                    }
                }

                if(sect.category_name == 'cpu'){
                    // var cpuCores = 0
                    // //Calculate the total number of cores for configuring the CPU
                    // sect.groups.map(group=>{
                    //     group.components.map(item=>{
                    //     if(item.is_checked == true){
                    //         item.cores = item.attributes.find((x) => x.attribute_code == 'cores').value
                    //         cpuCores = item.cores * item.quantity;
                    //         pageData.cpuSelectCores = cpuCores;
                    //     }
                    //     })
                    // })  

                    this.pageData.formData.select_CPU_amount = sect.finalNum
                    
                    // The finalnum of the CPU section is greater than max_cpu, indicating an error message
                    if (this.pageData.formData.select_CPU_amount > this.pageData.formData.max_cpu) {
                        var seAcc = sect.errors.find((x) => x.id === 6);
                        if (seAcc) {
                            seAcc.active = true;
                        }
                    } else {
                        var seAcc = sect.errors.find((x) => x.id === 6);
                        if (seAcc) {
                            seAcc.active = false;
                        }
                    }

                    // The operating system is configured, and if the total number of kernels in the operating system is less than the total number of kernels in the CPU.
                    // Both the operating system and CPU sections prompt an error message
                    
                    // if (this.pageData.osMin > 0) {
                    //     if (this.pageData.osSectionId !== "") {
                    //         if ( this.pageData.finalOSCores !=0 && this.pageData.finalOSCores < this.pageData.cpuSelectCores) {
                    //             var seAcc = this.pageData.formData.sections[this.pageData.osSectionId].errors.find(
                    //                 (x) => x.id === 11
                    //             );
                    //             if (seAcc) {
                    //                 seAcc.active = true;
                    //             }
                    //             var cpuAcc = sect.errors.find((x) => x.id === 11);
                    //             if (cpuAcc) {
                    //                 cpuAcc.active = true;
                    //             }
                    //         } else {
                    //             var seAcc = this.pageData.formData.sections[this.pageData.osSectionId].errors.find(
                    //                 (x) => x.id === 11
                    //             );
                    //             if (seAcc) {
                    //                 seAcc.active = false;
                    //             }
                    //             this.pageData.formData.sections.forEach(item => {
                    //                 if (item.category_name == "cpu") {
                    //                     var cpuAcc = item.errors.find((x) => x.id === 11);
                    //                     if (cpuAcc) {
                    //                         cpuAcc.active = false;
                    //                     }
                    //                 }
                    //             })

                    //         }
                    //     }
                    // }

                
                }
                
                if(sect.category_name == 'ram'){
                    //If the number of choices in a section is greater than max_ram, an error message will be prompted
                    this.pageData.formData.select_Ram_campacity = sect.finalNum

                    if (this.pageData.formData.select_Ram_campacity > this.pageData.formData.max_ram) {
                        var seAcc = sect.errors.find((x) => x.id === 4);
                        if (seAcc) {
                            seAcc.active = true;
                        }
                    } else {
                        var seAcc = sect.errors.find((x) => x.id === 4);
                        if (seAcc) {
                            seAcc.active = false;
                        }
                    }

                    //Calculate the total number of rate for configuring the ram
                    sect.groups.map(group=>{
                        group.components.map(single=>{
                            if(single.is_checked == true){
                                this.pageData.formData.select_Ram_campacity =
                                triggerCheck * triggerQuantity * single.rate;
                            }
                        })
                    
                    })
                    console.log("ram single component have not rate")

                    //If the selection rate of the section is greater than max_ram_mount, an error message will be prompted

                    if (
                        this.pageData.formData.select_Ram_campacity > this.pageData.formData.max_ram_amount
                    ) {
                        var seAcc = sect.errors.find((x) => x.id === 5);
                        if (seAcc) {
                            seAcc.active = true;
                        }
                    } else {
                        var seAcc = sect.errors.find((x) => x.id === 5);
                        if (seAcc) {
                            seAcc.active = false;
                        }
                    }

                }

                

                if(sect.category_name == 'drive'){
                    if(sect.name != "Rear BootDrive" && sect.name != "M.2 BootDrive"){

                        //When the onboard_raid_controller_suport_type of BOM is none

                        if(this.pageData.formData.onboard_raid_controller_support_type && this.pageData.formData.onboard_raid_controller_support_type == 'none'){
                            if(sect.finalNum > 0 && this.pageData.raidcontrollerSection != "" && this.pageData.formData.sections[this.pageData.raidcontrollerSection].finalNum==0){
                                //Configuration of Sata drive requires configuring a raid controller

                            if(this.pageData.sataTotalCheked>0){
                                    var seAcc = sect.errors.find((x) => x.id === 9);
                                    if(seAcc){
                                        seAcc.active = true
                                    }
                            }else{
                                    var seAcc = sect.errors.find((x) => x.id === 9);
                                    if(seAcc){
                                        seAcc.active = false
                                    }
                            }

                            //Configure sas drive, need to configure a sas raid controller

                                if(this.pageData.sasTotalCheked >0){
                                    var seAcc = sect.errors.find((x) => x.id === 10);
                                    if(seAcc){
                                        seAcc.active = true
                                    }
                                }else{
                                    var seAcc = sect.errors.find((x) => x.id === 10);
                                    if(seAcc){
                                        seAcc.active = false
                                    }
                                }
                                
                                //Check if the PCIE section reports an error. If there is no error and the controller is not configured, the first raid controller will be automatically configured

                                if(this.pageData.raidcontrollerSection != ""){
                                    this.pageData.formData.sections[this.pageData.raidcontrollerSection].errors.map(item=>{
                                        if(item.id == 3){
                                            this.pageData.pcieError = item.active 
                                        }
                                    })
                                }

                                if(this.pageData.pcieError == false){
                                    if(this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked == false || this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity == 0){
                                        this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked = true
                                        if(this.pageData.init){
                                            this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity = this.pageData.formData.sections[this.pageData.raidcontrollerSection].min||1
                                            this.groupItemSelect(this.pageData.raidcontrollerSection,this.pageData.formData.sections[this.pageData.raidcontrollerSection],this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0],this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0]);
                                        }
                                    }
                                }

                            
                            }else{
                                
                                //  Hiding error information without configuring dive
                                for (let index = 0; index < this.pageData.storageDriveSection.length; index++) {
                                    if(this.pageData.formData.sections[this.pageData.storageDriveSection[index]].finalNum == 0){
                                        if (this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors) {
                                            var seAcc = this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors.find(
                                                (x) => x.id === 10
                                            );
                                            seAcc.active = false;
                                        }
                                        if (this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors) {
                                            var seAcc = this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors.find(
                                                (x) => x.id === 9
                                            );
                                            seAcc.active = false;
                                        }

                                    }
                                    
                                }
                            }
                        }else if(this.pageData.formData.onboard_raid_controller_support_type && this.pageData.formData.onboard_raid_controller_support_type == 'sata'){
                            
                            //When the onboard_raid_controller_suport_type of BOM is sata

                            if((this.pageData.sasTotalCheked > 0 || this.pageData.sataTotalCheked>8)&&this.pageData.raidcontrollerSection != "" && this.pageData.formData.sections[this.pageData.raidcontrollerSection].finalNum==0){
                                
                                // If the number of configured Sata drives exceeds 8 and there is no configured SAS directory, a raid controller needs to be configured

                                if( this.pageData.sataTotalCheked>8){
                                    var seAcc = sect.errors.find((x) => x.id === 9);
                                    if(seAcc){
                                        seAcc.active = true
                                    }
                                }else{
                                    var seAcc = sect.errors.find((x) => x.id === 9);
                                    if(seAcc){
                                        seAcc.active = false
                                    } 
                                }

                                //To configure sas dive, a sas raid controller needs to be configured

                                if(this.pageData.sasTotalCheked > 0){
                                    var seAcc = sect.errors.find((x) => x.id === 10);
                                    if(seAcc){
                                        seAcc.active = true
                                    }
                                }else{
                                    var seAcc = sect.errors.find((x) => x.id === 10);
                                    if(seAcc){
                                        seAcc.active = false
                                    }
                                }
                                console.log("choose raid controller222-----",this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked)

                                //Check if the PCIE section reports an error. If there is no error and the controller is not configured, the first raid controller will be automatically configured


                                if(this.pageData.raidcontrollerSection != ""){
                                    this.pageData.formData.sections[this.pageData.raidcontrollerSection].errors.map(item=>{
                                        if(item.id == 3){
                                            this.pageData.pcieError = item.active 
                                        }
                                    })
                                }

                                if(this.pageData.pcieError == false){
                                    if(this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked == false || this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity == 0){
                                        this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked = true
                                        if(this.pageData.init){
                                            this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity = this.pageData.formData.sections[this.pageData.raidcontrollerSection].min||1
                                            this.groupItemSelect(this.pageData.raidcontrollerSection,this.pageData.formData.sections[this.pageData.raidcontrollerSection],this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0],this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0]);
                                        }
                                    }
                                }
                                console.log("choose raid controller222-----",this.pageData.init,this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity)


                            }else{
                                
                                for (let index = 0; index < this.pageData.storageDriveSection.length; index++) {
                                        if (this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors) {
                                            var seAcc = this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors.find(
                                                (x) => x.id === 10
                                            );
                                            seAcc.active = false;
                                        }
                                        if (this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors) {
                                            var seAcc = this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors.find(
                                                (x) => x.id === 9
                                            );
                                            seAcc.active = false;
                                        }

                                    
                                }
                            }
                        
                        }else if(this.pageData.formData.onboard_raid_controller_support_type && this.pageData.formData.onboard_raid_controller_support_type == 'sas'){
                            // bom的onboard_raid_controller_support_type为sas时
                            if((this.pageData.sasTotalCheked+this.pageData.sataTotalCheked)>8 && this.pageData.raidcontrollerSection != "" && this.pageData.formData.sections[this.pageData.raidcontrollerSection].finalNum==0){
                                
                                //If the number of configured Sata drives exceeds 8 and there is no configured SAS directory, a raid controller needs to be configured
                                //If the number of configured sas drives exceeds 8 and there is no sas directory configured, a sas raid controller needs to be configured
                                //When configuring both sat drive and sas drive simultaneously and the number exceeds 8, both errors will be displayed

                                if(this.pageData.sataTotalCheked>0){
                                    var seAcc = sect.errors.find((x) => x.id === 9);
                                    if(seAcc){
                                        seAcc.active = true
                                    }
                                }else{
                                    var seAcc = sect.errors.find((x) => x.id === 9);
                                    if(seAcc){
                                        seAcc.active = false
                                    }
                                }
                                if( this.pageData.sasTotalCheked>0){
                                    var seAcc = sect.errors.find((x) => x.id === 10);
                                    if(seAcc){
                                        seAcc.active = true
                                    }
                            }else{
                                var seAcc = sect.errors.find((x) => x.id === 10);
                                    if(seAcc){
                                        seAcc.active = false
                                    }
                            }
                                console.log("choose sas raid controller222-----",this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked)

                                //Check if the PCIE section reports an error. If there is no error and the controller is not configured, the first raid controller will be automatically configured

                                if(this.pageData.raidcontrollerSection != ""){
                                    this.pageData.formData.sections[this.pageData.raidcontrollerSection].errors.map(item=>{
                                        if(item.id == 3){
                                            this.pageData.pcieError = item.active
                                        }
                                    })
                                }
                                if(this.pageData.pcieError == false){
                                    if(this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked == false || this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity == 0){
                                        this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].is_checked = true
                                        if(this.pageData.init){
                                            this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity = this.pageData.formData.sections[this.pageData.raidcontrollerSection].min||1
                                            this.groupItemSelect(this.pageData.raidcontrollerSection,this.pageData.formData.sections[this.pageData.raidcontrollerSection],this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0],this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0]);
                                        }
                                    }
                                }
                                console.log("choose sas raid controller222-----",this.pageData.init,this.pageData.formData.sections[this.pageData.raidcontrollerSection].groups[0].components[0].quantity)


                            }else{
                            
                                for (let index = 0; index < this.pageData.storageDriveSection.length; index++) {
                                    if (this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors) {
                                        var seAcc = this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors.find(
                                            (x) => x.id === 10
                                        );
                                        seAcc.active = false;
                                    }
                                    if (this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors) {
                                        var seAcc = this.pageData.formData.sections[this.pageData.storageDriveSection[index]].errors.find(
                                            (x) => x.id === 9
                                        );
                                        seAcc.active = false;
                                    }
                                }
                            }
                            
                        }
                        
                    }

                    
                }

                if(sect.category_name == 'raid controller'){
                    if(sect.name == 'SAS Raid Controller'){

                        if(this.pageData.formData.onboard_raid_controller_support_type && this.pageData.formData.onboard_raid_controller_support_type == 'none'){
                            if (sect.finalNum > 0 || (this.pageData.sasTotalCheked == 0 && this.pageData.sataTotalCheked == 0)) {

                                
                                normalDriveSectionError(false)
                                
                            } else {

                                normalDriveSectionError(true)  
                                        
                            }
                        }else if(this.pageData.formData.onboard_raid_controller_support_type && this.pageData.formData.onboard_raid_controller_support_type == 'sata' ){
                            if (sect.finalNum > 0 ||( this.pageData.sasTotalCheked == 0 && this.pageData.sataTotalCheked < 9)) {

                                normalDriveSectionError(false)
                                
                            } else {

                                normalDriveSectionError(true)    
                                    
                            }
                        }else if(this.pageData.formData.onboard_raid_controller_support_type && this.pageData.formData.onboard_raid_controller_support_type == 'sas'){
                            if (sect.finalNum > 0 || ( Number(this.pageData.sasTotalCheked + this.pageData.sataTotalCheked) < 9)) {

                                normalDriveSectionError(false)
                                
                            } else {

                                normalDriveSectionError(true)  
                                        
                            }
                        }

                        

                    }
                        
                }

                // if(sect.category_name == 'operating system'){

                //     var cores = 0;
                //     var itemSelected = 0;

                //     //Calculate the total number of cores for the operating system
                    
                //     sect.groups.map(group=>{
                //         group.components.map(item=>{
                //             if(item.is_checked == true){
                //                 item.cores = item.attributes.find((x) => x.attribute_code == 'cores').value
                //                 cores += item.cores * item.quantity;
                //                 itemSelected++;
                //                 this.pageData.osMin++
                //             }
                //         })
                //     })



                //     this.pageData.OSCores = cores;
                //     if(sect.finalNum>0){
                //         this.pageData.finalOSCores = this.pageData.OSCores + this.pageData.softwareCores;
                //     }else{
                //         this.pageData.finalOSCores = 0;
                //     }
                    
                //     //CPU is configured, and if the total number of cores in the operating system is greater than the total number of cores in the CPU.
                //     //Both the operating system and CPU will prompt an error message
                    
                //     if(this.pageData.cpuSectionId != ""){
                //         if (this.pageData.osMin > 0 && this.pageData.OSCores) {
                //             if (this.pageData.finalOSCores < this.pageData.cpuSelectCores) {
                //                 //处理operating system
                //                 var seAcc = sect.errors.find((x) => x.id === 11);
                //                 var cpuAcc = this.pageData.formData.sections[this.pageData.cpuSectionId].errors.find((x) => x.id === 11);

                //                 if(seAcc){
                //                     seAcc.active = true
                //                 }
                //                 if(cpuAcc){
                //                     cpuAcc.active = true
                //                 }
                            
                //             }else{
                //                 var seAcc = sect.errors.find((x) => x.id === 11);
                //                 var cpuAcc = this.pageData.formData.sections[this.pageData.cpuSectionId].errors.find((x) => x.id === 11);
                //                 if(seAcc){
                //                     seAcc.active = false
                //                 }
                //                 if(cpuAcc){
                //                     cpuAcc.active = false
                //                 }
                //             }

                //         }else{
                //             var seAcc = sect.errors.find((x) => x.id === 11);
                //             var cpuAcc = this.pageData.formData.sections[this.pageData.cpuSectionId].errors.find((x) => x.id === 11);
                //             if(seAcc){
                //                 seAcc.active = false
                //             }
                //             if(cpuAcc){
                //                 cpuAcc.active = false
                //             }
                //         }
                //     }


                // }

                // if(sect.category_name == 'software' && sect.name =="Additional License"){
                //     var cores = 0;
                //     for (let i = 0; i < sect.groups.length; i++) {
                //         for (let m = 0; m < sect.groups[i].components.length; m++) {
                //             if (sect.groups[i].components[m].is_checked == true && sect.groups[i].components[m].cores) {
                //             cores +=
                //             sect.groups[i].components[m].cores *
                //             sect.groups[i].components[m].quantity;
                //             }
                //         }
                //     }
                //     this.pageData.softwareCores = cores;
                //     // this.pageData.finalOSCores = this.pageData.OSCores + this.pageData.softwareCores;
                //     if(sect.finalNum>0){
                //         this.pageData.finalOSCores = this.pageData.OSCores + this.pageData.softwareCores;
                //     }else{
                //         this.pageData.finalOSCores = 0;
                //     }
                //     if (this.pageData.cpuSectionId !== "") {
                //         if (this.pageData.finalOSCores > 0) {
                //             if (this.pageData.finalOSCores < this.pageData.cpuSelectCores ) {
                //                 var seAcc = this.pageData.formData.sections[this.pageData.osSectionId].errors.find(
                //                     (x) => x.id === 11
                //                 );
                //                 if (seAcc) {
                //                     seAcc.active = true;
                //                 }
                //                 var cpuAcc = this.pageData.formData.sections[
                //                     this.pageData.cpuSectionId
                //                 ].errors.find((x) => x.id === 11);
                //                 if (cpuAcc) {
                //                     cpuAcc.active = true;
                //                 }
                //             } else {
                //                 var seAcc = this.pageData.formData.sections[this.pageData.osSectionId].errors.find(
                //                     (x) => x.id === 11
                //                 );
                //                 if (seAcc) {
                //                     seAcc.active = false;
                //                 }
                //                 var cpuAcc = this.pageData.formData.sections[
                //                     this.pageData.cpuSectionId
                //                 ].errors.find((x) => x.id === 11);
                //                     if (cpuAcc) {
                //                         cpuAcc.active = false;
                //                     }
                //                 }
                //             }
                //         }
                // }

                // When the collection name of the section is AOC, calculate PCIE and display error information
                if(sect.category_name == "raid controller" || sect.category_name == 'gpu' || sect.category_name == 'nic'){
                    this.checkPCIE(sect,single)
                    console.log(
                        pageData.formData.max_pcie_x4_fh_slot,'初始pcie x4_fh_slot',
                        pageData.formData.max_pcie_x8_fh_slot,'初始pcie x8_fh_slot',
                        pageData.formData.max_pcie_x16_fh_slot,'初始pcie x16_fh_slot',
                        pageData.formData.max_pcie_x4_lp_slot, '初始pcie x4_lp_slot',
                        pageData.formData.max_pcie_x8_lp_slot,'初始pcie x8_lp_slot', 
                        pageData.formData.max_pcie_x16_lp_slot, '初始pcie x16_lp_slot',
                    )
                    console.log(
                        pageData.fh_speed_x4,'已用pcie x4_fh_slot',
                        pageData.fh_speed_x8,'已用pcie x8_fh_slot',
                        pageData.fh_speed_x16,'已用pcie x16_fh_slot',
                        pageData.lp_speed_x4,'已用pcie x4_lp_slot',
                        pageData.lp_speed_x8,'已用pcie x8_lp_slot',
                        pageData.lp_speed_x16,'已用pcie x16_lp_slot',
                    )
                    console.log(
                        pageData.available_max_pcie_x4_fh_slot,'剩余pcie x4_fh_slot',
                        pageData.available_max_pcie_x8_fh_slot,'剩余pcie x8_fh_slot',
                        pageData.available_max_pcie_x16_fh_slot,'剩余pcie x16_fh_slot',
                        pageData.available_max_pcie_x4_lp_slot,'剩余pcie x4_lp_slot',
                        pageData.available_max_pcie_x8_lp_slot,'剩余pcie x8_lp_slot',
                        pageData.available_max_pcie_x16_lp_slot,'剩余pcie x16_lp_slot'
                    )
                }
                this.checkErrorStatus()
            

            },

             /**
                * @description Check whether the pcie related to the selected parameter is correct
                * @param {Object} sect:Currently selected sect
                * @param {Object} single:Currently selected single
            */
            checkPCIE(sect,single){

                this.pageData.fh_speed_x4_arr = [],
                this.pageData.fh_speed_x8_arr = [],
                this.pageData.fh_speed_x16_arr = [],
                this.pageData.lp_speed_x4_arr = [],
                this.pageData.lp_speed_x8_arr = [],
                this.pageData.lp_speed_x16_arr = [],


                this.pageData.fh_speed_x4 = 0
                this.pageData.fh_speed_x8 = 0
                this.pageData.fh_speed_x16 = 0

                this.pageData.lp_speed_x4 = 0
                this.pageData.lp_speed_x8 = 0
                this.pageData.lp_speed_x16 = 0

                this.pageData.available_max_pcie_x4_fh_slot= this.pageData.formData.max_pcie_x4_fh_slot;   
                this.pageData.available_max_pcie_x8_fh_slot= this.pageData.formData.max_pcie_x8_fh_slot;
                this.pageData.available_max_pcie_x16_fh_slot= this.pageData.formData.max_pcie_x16_fh_slot;

                this.pageData.available_max_pcie_x4_lp_slot= this.pageData.formData.max_pcie_x4_lp_slot;
                this.pageData.available_max_pcie_x8_lp_slot= this.pageData.formData.max_pcie_x8_lp_slot;
                this.pageData.available_max_pcie_x16_lp_slot= this.pageData.formData.max_pcie_x16_lp_slot;


                //Loop section, grouping configured PCIe of the same type together
                this.pageData.formData.sections.map(item=>{
                    if(item.category_name == "raid controller" || item.category_name == 'gpu' || item.category_name == 'nic'){
                        item.groups.map(group=>{
                            group.components.map(component=>{
                                if(component.is_checked == true){
                                    if(component.form_factor == 'fh'){
                                        if(component.pcie_speed == 4){ 
                                            this.pageData.fh_speed_x4_arr.push({
                                                sku:component.sku,
                                                name:item.name,
                                                slot:component.pcie_slot_width,
                                                form_factor:component.form_factor,
                                                speed:component.pcie_speed,
                                                qty:component.quantity
                                            
                                            })
                                        
                                        

                                        }else if(component.pcie_speed == 8){
                                            this.pageData.fh_speed_x8_arr.push({
                                                sku:component.sku,
                                                name:item.name,
                                                slot:component.pcie_slot_width,
                                                form_factor:component.form_factor,
                                                speed:component.pcie_speed,
                                                qty:component.quantity
                                            
                                            })
                                        

                                        }else if(component.pcie_speed == 16){
                                            this.pageData.fh_speed_x16_arr.push({
                                                sku:component.sku,
                                                name:item.name,
                                                slot:component.pcie_slot_width,
                                                form_factor:component.form_factor,
                                                speed:component.pcie_speed,
                                                qty:component.quantity
                                            
                                            })
                                        
                                            
                                        }
                                    }else if(component.form_factor == 'lp'){

                                        if(component.pcie_speed == 4){ 
                                            this.pageData.lp_speed_x4_arr.push({
                                                sku:component.sku,
                                                name:item.name,
                                                slot:component.pcie_slot_width,
                                                form_factor:component.form_factor,
                                                speed:component.pcie_speed,
                                                qty:component.quantity
                                            
                                            })
                                        
                                        }else if(component.pcie_speed == 8){
                                            this.pageData.lp_speed_x8_arr.push({
                                                sku:component.sku,
                                                name:item.name,
                                                slot:component.pcie_slot_width,
                                                form_factor:component.form_factor,
                                                speed:component.pcie_speed,
                                                qty:component.quantity
                                            
                                            })
                                        

                                        }else if(component.pcie_speed == 16){
                                            this.pageData.lp_speed_x16_arr.push({
                                                sku:component.sku,
                                                name:item.name,
                                                slot:component.pcie_slot_width,
                                                form_factor:component.form_factor,
                                                speed:component.pcie_speed,
                                                qty:component.quantity
                                            
                                            })
                                        
                                            
                                        }
                                    }
                                }
                            })
                        })
                    }
                })

                // When the type of PCIe is fh and the slot is configured as x4, 

                this.pageData.fh_speed_x4_arr.map(item=>{
                    this.pageData.fh_speed_x4 += item.slot* item.qty //First, calculate the slot that fh_speed_x4 needs to occupy
                    this.pageData.available_max_pcie_x4_fh_slot -= item.slot*item.qty //Calculate slots exceeding fh_speed x4

                    if(this.pageData.available_max_pcie_x4_fh_slot<0){ //If all slots in fh_speed_x4 are occupied,
                        var add_fh_x8 = Math.abs(this.pageData.available_max_pcie_x4_fh_slot) //Calculate the quantity exceeding fh_x4 and occupied it in fh_x16
                        this.pageData.available_max_pcie_x4_fh_slot = 0
                        if(this.pageData.available_max_pcie_x8_fh_slot - add_fh_x8 <0){  //If all slots of fh_speed x8 are occupied
                        
                            var add_fh_x16 = Math.abs(this.pageData.available_max_pcie_x8_fh_slot - add_fh_x8) 

                            this.pageData.available_max_pcie_x8_fh_slot = 0

                            if(this.pageData.available_max_pcie_x16_fh_slot - add_fh_x16 <0){ //If all slots in fh_speed_x16 are occupied, an error message will be displayed

                                pcieSectionError(true);
                                this.pageData.available_max_pcie_x16_fh_slot = 0
                            }else{
                                pcieSectionError(false); 
                                this.pageData.available_max_pcie_x16_fh_slot = this.pageData.available_max_pcie_x16_fh_slot - add_fh_x16 //update available_max_pcie_x16_fh_slot
                            }

                        }else{
                            this.pageData.available_max_pcie_x8_fh_slot = this.pageData.available_max_pcie_x8_fh_slot - add_fh_x8  //update available_max_pcie_x8_fh_slot
                        }
                    }
                })

                //When the type of PCIe is fh and the slot is configured as x8
                this.pageData.fh_speed_x8_arr.map(item=>{
                    this.pageData.fh_speed_x8 += item.slot* item.qty //First, calculate the slots that fh_speed x8 needs to occupy
                    this.pageData.available_max_pcie_x8_fh_slot -= item.slot*item.qty ///Calculate slots exceeding fh_speed_x8

                    if(this.pageData.available_max_pcie_x8_fh_slot<0){ //If all slots in fh_speed_x8 are occupied

                        var add_fh_x16 = Math.abs(this.pageData.available_max_pcie_x8_fh_slot) //Calculate the quantity exceeding fhx8 and occupied it in fhx16
                        this.pageData.available_max_pcie_x8_fh_slot = 0
                            
                        if(this.pageData.available_max_pcie_x16_fh_slot - add_fh_x16 <0){ //If all slots of fh_speed x16 are occupied, an error message will be prompted

                            pcieSectionError(true);
                            this.pageData.available_max_pcie_x16_fh_slot = 0
                        }else{
                            pcieSectionError(false); 
                            this.pageData.available_max_pcie_x16_fh_slot = this.pageData.available_max_pcie_x16_fh_slot - add_fh_x16
                        }

                        
                    }
                })

                //When the type of PCIe is fh and the slot is configured as x16

                this.pageData.fh_speed_x16_arr.map(item=>{
                    this.pageData.fh_speed_x16 += item.slot*item.qty //First, calculate the slot that fh speed x16 needs to occupy
                    this.pageData.available_max_pcie_x16_fh_slot -= item.slot*item.qty
                    if(this.pageData.available_max_pcie_x16_fh_slot<0){ //If all slots of fh_speed x16 are occupied, an error message will be prompted
                        pcieSectionError(true);
                        this.pageData.available_max_pcie_x16_fh_slot = 0
                    }else{
                        pcieSectionError(false);
                    }
                })


                //When the type of PCIe is lp and the slot is configured as x4
                this.pageData.lp_speed_x4_arr.map(item=>{

                    this.pageData.lp_speed_x4 += item.slot* item.qty //First, calculate the slot that lp_speed x4 needs to occupy
                    this.pageData.available_max_pcie_x4_lp_slot -= item.slot*item.qty //Calculate slots exceeding lp_speed_x4

                    if(this.pageData.available_max_pcie_x4_lp_slot<0){ //If all slots in lp_speed_x4 are occupied,

                        var x4_fh_slot = Math.abs(this.pageData.available_max_pcie_x4_lp_slot) //Calculate the quantity exceeding lp x4 and occupied it in fh_x4
                        this.pageData.available_max_pcie_x4_lp_slot = 0

                        if(this.pageData.available_max_pcie_x4_fh_slot - x4_fh_slot <0){ //If all slots in fh_speed_x4 are occupied,

                            var add_x8_lp_slot = Math.abs(this.pageData.available_max_pcie_x4_fh_slot - x4_fh_slot) //Calculate the quantity exceeding fh x4 and occupied it in lp x8
                            this.pageData.available_max_pcie_x4_fh_slot = 0

                            if(this.pageData.available_max_pcie_x8_lp_slot - add_x8_lp_slot <0){ //If all slots in lp_speed_x8 are occupied,

                                var add_x8_fh_slot = Math.abs(this.pageData.available_max_pcie_x8_lp_slot - add_x8_lp_slot) //Calculate the quantity exceeding lpx8 and occupied it in fhx8
                                this.pageData.available_max_pcie_x8_lp_slot = 0

                                if(this.pageData.available_max_pcie_x8_fh_slot - add_x8_fh_slot <0){ //If all slots in fh_speed_x8 are occupied,


                                    var add_x16_lp_slot = Math.abs(this.pageData.available_max_pcie_x8_fh_slot - add_x8_fh_slot) //Calculate the quantity exceeding fh_x8 and occupied it in lp_x16
                                    this.pageData.available_max_pcie_x8_fh_slot = 0

                                    if(this.pageData.available_max_pcie_x16_lp_slot - add_x16_lp_slot<0){ //if all slots in lp_speed_x16 are occupied,

                                        var add_x16_fh_slot = Math.abs(this.pageData.available_max_pcie_x16_lp_slot - add_x16_lp_slot) //Calculate the quantity exceeding lp_x16 and occupied it in fh x16
                                        this.pageData.available_max_pcie_x16_lp_slot = 0

                                        if(this.pageData.available_max_pcie_x16_fh_slot - add_x16_fh_slot < 0){ //If all slots of fh speed x16 are occupied, an error message will be prompted
                                            pcieSectionError(true);
                                            this.pageData.available_max_pcie_x16_fh_slot = 0

                                        }else{
                                            pcieSectionError(false);
                                            this.pageData.available_max_pcie_x16_fh_slot =this.pageData.available_max_pcie_x16_fh_slot - add_x16_fh_slot
                                        }

                                    }else{
                                        this.pageData.available_max_pcie_x16_lp_slot = this.pageData.available_max_pcie_x16_lp_slot - add_x16_lp_slot
                                    }
                                }else{
                                    this.pageData.available_max_pcie_x8_fh_slot = this.pageData.available_max_pcie_x8_fh_slot - add_x8_fh_slot
                                }


                            }else{
                                this.pageData.available_max_pcie_x8_lp_slot = this.pageData.available_max_pcie_x8_lp_slot-add_x8_lp_slot
                            }

                        }else{
                            this.pageData.available_max_pcie_x4_fh_slot= this.pageData.available_max_pcie_x4_fh_slot - x4_fh_slot
                        }
                    }
                })

                //When the type of PCIe is Lp and the slot is configured as x8
                this.pageData.lp_speed_x8_arr.map(item=>{

                    this.pageData.lp_speed_x8 += item.slot* item.qty //First, calculate the slot that lp_speed_x8 needs to occupy
                    this.pageData.available_max_pcie_x8_lp_slot -= item.slot*item.qty //Calculate slots exceeding lp speed x8

                    if(this.pageData.available_max_pcie_x8_lp_slot<0){ //If all slots in lp_speed_x8 are occupied

                        var add_x8_fh_slot = Math.abs(this.pageData.available_max_pcie_x8_lp_slot) //Quantity exceeding lpx8
                        this.pageData.available_max_pcie_x8_lp_slot = 0

                        if(this.pageData.available_max_pcie_x8_fh_slot - add_x8_fh_slot <0){ //If all slots in fh_speed_x16 are occupied

                            var add_x16_lp_slot = Math.abs(this.pageData.available_max_pcie_x8_fh_slot - add_x8_fh_slot) //Quantity exceeding fh_x8
                            this.pageData.available_max_pcie_x8_fh_slot = 0

                            if(this.pageData.available_max_pcie_x16_lp_slot - add_x16_lp_slot){ //If all slots in lp_speed_x16 are occupied

                                var add_x16_fh_slot = Math.abs(this.pageData.available_max_pcie_x16_lp_slot - add_x16_lp_slot) //Quantity exceeding lp_x16
                                this.pageData.available_max_pcie_x16_lp_slot = 0

                                if(this.pageData.available_max_pcie_x16_fh_slot - add_x16_fh_slot < 0){ //If the slots of the fh_speed x16 are all occupied, an error message will be displayed
                                    pcieSectionError(true);
                                    this.pageData.available_max_pcie_x16_fh_slot = 0

                                }else{
                                    pcieSectionError(false);
                                    this.pageData.available_max_pcie_x16_fh_slot = this.pageData.available_max_pcie_x16_fh_slot - add_x16_fh_slot //update available_max_pcie_x16_fh_slot
                                }

                            }else{
                                this.pageData.available_max_pcie_x16_lp_slot  = this.pageData.available_max_pcie_x16_lp_slot - add_x16_lp_slot //update available_max_pcie_x16_lp_slot
                            }
                        }else{
                            this.pageData.available_max_pcie_x8_fh_slot = this.pageData.available_max_pcie_x8_fh_slot - add_x8_fh_slot //update available_max_pcie_x8_fh_slot
                        }


                    }


                })

                //When the type of PCIe is Lp and the slot is configured as x16
                this.pageData.lp_speed_x16_arr.map(item=>{

                    this.pageData.lp_speed_x16 += item.slot* item.qty //First, calculate the slot that lp_speed_x16 needs to occupy
                    this.pageData.available_max_pcie_x16_lp_slot -= item.slot*item.qty //Calculate slots exceeding lp_speed_x16

                    if(this.pageData.available_max_pcie_x16_lp_slot <0){ //If all slots of lp_speed x16 are occupied

                        var add_x16_fh_slot = Math.abs(this.pageData.available_max_pcie_x16_lp_slot) //Quantity exceeding lpx16
                        this.pageData.available_max_pcie_x16_lp_slot = 0

                        if(this.pageData.available_max_pcie_x16_fh_slot - add_x16_fh_slot < 0){ //Place the excess slots in fh_speedx16. If the slots in fh_speedx16 also exceed, an error message will be displayed
                            pcieSectionError(true);
                            this.pageData.available_max_pcie_x16_fh_slot = 0

                        }else{
                            pcieSectionError(false);
                            this.pageData.available_max_pcie_x16_fh_slot = this.pageData.available_max_pcie_x16_fh_slot - add_x16_fh_slot < 0
                        }

                    }



                })








                // console.log(
                //     pageData.fh_speed_x4_arr,
                //     pageData.fh_speed_x8_arr,
                //     pageData.fh_speed_x16_arr,
                //     pageData.lp_speed_x4_arr,
                //     pageData.lp_speed_x8_arr,
                //     pageData.lp_speed_x16_arr,

                // )





                // console.log(
                //     pageData.fh_speed_x4,
                //     pageData.fh_speed_x8,
                //     pageData.fh_speed_x16,
                //     pageData.lp_speed_x4,
                //     pageData.lp_speed_x8,
                //     pageData.lp_speed_x16,


                // '已用pcie')

            },

            checkErrorStatus(){
                var arr = []
                var saleable= [] 
                this.pageData.errorStatus = false
                this.pageData.formData.bom_accessories.map(item=>{
                        saleable.push(item.is_saleable)
                        
                })
                this.pageData.formData.sections.map(sect => {
                    sect.errors.map(err => {
                        if(err.active == true){
                            this.pageData.errorStatus = true
                        }
                    })
                   
                    sect.groups.map(group=>{
                        group.components.map(single=>{
                            if(single.quantity>0 && single.is_checked == true){
                                
                                if(single.accessories.length>0){
                                    single.accessories.map(item=>{
                                        saleable.push(item.is_saleable)
                                    
                                    })
                                }
                                
                                saleable.push(single.is_saleable)
                                arr.push({
                                    name:sect.name,
                                    desc:single.description,
                                    saleable:single.is_saleable,
                                    accessories:single.accessories

                                })
                            }
                        })
                    })
                })
                if(saleable.indexOf(false) != -1){
                    this.pageData.errorStatus = true  
                }
                console.log(arr,saleable,',bbbbbbb')
            }

                
                
        }
                
    }
    
     /**
     * @description Calculate the maximum value of the main storage section
     * @param {Number} min:section min quantity
     * @param {Number} max:section max quantity
     * @param {Number} baysNum:select bays number
     * @param {Number} step:quantity step
     * @param {Number} final_num: All quantities selected under the current section
     * @returns {Number} num
     */
    function ChangeTabBayNum(min,max,baysNum,step,final_num){
        baysNum = pageData.formData.front_max_drives - pageData.occupy_bays_number + final_num
        if(baysNum>max){
            num  = max
            
            }else{
                if(baysNum == final_num || baysNum >final_num){
                    num = baysNum 
                }else{
                    num = baysNum - final_num
                    if(num<0){
                        num = baysNum  
                    }
                }
               
        }
        return num
    }
   
     /**
     * @description Dynamically display the quantity drop-down option
     * @param {Number} min:section min quantity
     * @param {Number} max:section max quantity
     * @param {Number} baysNum:select bays number
     * @param {Number} step:quantity step
     * @param {Object} single: current single
     * @returns {Array} select quantity
     */
    function getBaseNum(min,max,final_num,step,single){
        var data={}
        var arr =[]
        var num = ''

        if(single.is_checked == true){
            if(max > final_num){
                num = max - final_num + Number(single.quantity)
            }else if(max ==  final_num){
                num = single.quantity
            }
        }else{
            if(max > final_num){
                num = max - final_num 
            }else if(max ==  final_num){
                num = 0
            }
        }
        for(var i = min;i <= num;i += step){
           
            arr.push(data={
                    value:i,
                    label:i
                })
            
        }
        return arr
    }

    function initSingleQuantity(min,max,final_num,step,single){
       
        var num = ''

        if(single.is_checked == false){
            single.quantity = 0
        }

        var num = ''

        if(single.is_checked == true){
            if(max > final_num){
                num = max - final_num + Number(single.quantity)
            }else if(max ==  final_num){
                num = single.quantity
            }
        }else{
            if(max > final_num){
                num = max - final_num 
            }else if(max ==  final_num){
                num = 0
            }
        }

        return [single.quantity,num]
    }


    /**
     * @description Set the number of drop-down lists according to the maximum and minimum values of the section, 
     * as well as the default step size
     * @param {Number} min:section min quantity
     * @param {Number} max:section max quantity
     * @param {Number} step:quantity step
     * @returns {Array} select quantity
     */
    function getBaseNumRadio(min,max,step,single){
        var data={}
        var arr =[]
        // if(min != 0){
        //     single.quantity = min
        // }else{
        //     single.quantity = step
        // }
        
        for(var i = min;i <= max;i += step){
            if(i!=0){
                arr.push(data={
                    value:i,
                    label:i
                })
            }
            
        }
        return [single.quantity,max]
    }

    function formatPrice(single,DefaultPrice) {
        var price = 0
        var currency_discount = pageData.formData.currency == 'au_price' ? 1.1 : 1.15
        var price = Math.round((single.quantity > 0 ? single.quantity : 1) * single.price - DefaultPrice)
        let final_val = price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return final_val
    }

    function formatSymbol(single,DefaultPrice){
        var symbol = (single.quantity > 0 ? single.quantity : 1) * single.price > DefaultPrice ? "+" : ""
        return symbol
    }
  
   


</script>

<div x-data="setup()" x-init="fetchData()" class="product-content-digicor">
    <template x-if="data ">
        <div x-data={pageData:pageData}>
            <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true"  x-show="updateProduct()[0] == true">
                
                <div class="fixed inset-0 bg-gray-500 opacity-50 bg-opacity-75 transition-opacity"></div>

                <div class="fixed inset-0 z-10  overflow-y-auto">
                    <div style="width:50%" class="flex min-h-full w-3/6 m-auto items-end justify-center p-4 text-center sm:items-center sm:p-0">
                    
                    <div class="relative  overflow-hidden w-full rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                        <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                            <button @click="closeVolume()" type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                
                                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                        </button>
                        </div>
                        <div class="p-2 ">
                        
                            <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                                <h3 class="text-base mb-2 font-semibold leading-6 text-gray-900" id="modal-title">Volume Sign</h3>
                                <template x-for="(item,driveIndex) in pageData.driveVolume">
                                    <div class="flex mb-2 justify-between">
                                        <div class="">
                                            <div>
                                                <span x-text="item.quantity" class="text-rose-600"></span>
                                                <span x-text="item.name"></span>
                                            </div>
                                            
                                        </div>
                                    
                                        <div class="mt-5 text-right flex">
                                            <select  
                                                
                                                x-model="pageData.volumeData.volume[driveIndex]"  
                                                name="location" 
                                                class="h-9 ml-2 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                <template x-for="select in stepping(pageData.volumeRaid, item.quantity)">
                                                    <option x-value="select.value" x-text="select.value" ></option>
                                                </template>
                                            </select> 
                                            <button type="button" @click="addVolumn(item,driveIndex)"   class="ml-2 h-35 rounded-md bg-indigo-600 px-3  text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" x-text="'Add'"></button> 
                                        </div>
                                    </div> 
                                </template>
                            </div>
                        </div>
                        
                    </div>
                    </div>
                </div>
            </div>

            <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true"  x-show="updateProduct()[1] == true">

                <div class="fixed inset-0 bg-gray-500 opacity-50 bg-opacity-75 transition-opacity"></div>

                <div class="fixed inset-0 z-10 overflow-y-auto">
                    <div style="width:50%" class="flex m-auto min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                    
                        <div class="relative w-full  overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                            <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                                <button @click="closeHotSpareDialog" type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                    
                                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <div class="">
                            
                                <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                                    <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Global Hot Swap</h3>
                                    <template x-for="(item,driveIndex) in pageData.hotVolume">
                                        <div class="flex mb-2 justify-between">
                                            <div class="">
                                                <div>
                                                    <span x-text="item.quantity" class="text-rose-600"></span>
                                                    <span x-text="item.name"></span>
                                                </div>
                                                
                                            </div>
                                        
                                            <div class="mt-5 text-right flex">
                                                <select  
                                                
                                                x-model="pageData.hotSwapData.hotSwapindex[driveIndex]"  
                                                name="location" 
                                                class="h-9 ml-2 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                <template x-for="select  in item.quantity > 1  ? pageData.hotSwapList2 : pageData.hotSwapList1">
                                                    <option x-value="select.value" x-text="select.value" ></option>
                                                </template>
                                                </select> 
                                                <button type="button" @click="addHotSpare(item,driveIndex)"   class=" ml-2 h-35 rounded-md bg-indigo-600 px-3  text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" x-text="'Add'"></button> 
                                            </div>
                                        </div> 
                                    </template>
                                </div>
                            </div>
                            
                        </div>
                    </div>
                </div>
            </div>
            <div class="grid grid-cols-3 gap-4 cancel-grid"  >
                <div class="col-span-2 md:col-span-2   p-4 rounded-2xl">

                    <!-- bom collection template -->
                    <div class="mt-4 mb-4" x-show=" BomCollection.length>0">
                        <div @click="pageData.showConfigInfo =! pageData.showConfigInfo" >
                            <p class="font-bold" x-text="'Current Option - ' + pageData.formData.name"></p>
                            <div>
                                <span class="text-sm ">
                                    There are <em x-text="BomCollection.length" class="text-rose-600 font-bold not-italic"> </em> options you can choose from
                                </span>
                                <span :class="pageData.showConfigInfo == true ? 'text-rose-600':''" class=" float-right cursor-pointer" x-show="pageData.showInitConfig == false" x-text="pageData.showConfigInfo == true ?'Less Options':'More Options'"></span>
                            </div>
                           
                        </div>
                        
                        <div class=" relative" x-show="pageData.showConfigInfo == true">
                            <template x-for="(bom_row,index) in BomCollection_row">
                                <div :class="BomRowLength[index]? 'grid-cols-'+BomRowLength[index] + ' gap-'+BomRowLength[index] : '' "  class="grid  mb-2  mt-3 mobile_bom_collection" >
                                    <template x-for="item in BomCollection">
                                        <div x-show="item.row_position == bom_row" :class="item.sku == pageData.formData.name ? 'bg-gray-100':''" @click="newfetchData(item.linked_product_id)" class=" border border-current border-solid px-2 py-6 cursor-pointer text-[#222222]">
                                            <div class="flex">
                                                <svg :class=" item.sku == pageData.formData.name ?'bg-checked':'bg-none-checked'" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-8 h-8  ">
                                                    <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clip-rule="evenodd" />
                                                </svg>
                                                <p class="ml-2" x-text="item.sku"></p>
                                            </div>
                                            
                                                <ul class="text-sm mt-2 list-disc pl-6 ">
                                                    <div x-show="item.briefs.length>0">
                                                        <template x-for="icon in item.briefs" >
                                                            <li :class="icon.primary == true?'font-bold':''">
                                                                <span x-show="icon.label != ''" x-text="icon.label+':'"></span>
                                                                <span x-show="icon.value != ''" x-text="icon.value"></span>
                                                            </li>
                                                        </template>
                                                    </div>
                                              
                                            
                                            </ul>
                                        </div>
                                    </template> 
                                </div>
                            </template>
                        
                            
                            <div class="absolute bottom-0 w-full show_more_option h-32" x-show="pageData.showInitConfig == true">
                                <div class="absolute bottom-0 text-center transform pb-2 flex cursor-pointer" @click="pageData.showInitConfig = false">
                                    <span x-text="'More Options'" class="text-slate-500"></span>           
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-slate-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                                    </svg>

                                </div>
                            </div>
                        </div>
                    
                    </div>
    

                    <!-- BareBom Info template -->                              
                    <template x-for="(section, index) in pageData.formData.sections">
                    
                        <div class="border-slate-200  mb-4 bg-white pl-2 pr-2 rounded-2xl" x-show="section.is_main_part == true">
                            
                            <!-- <div class="flex justify-between  h-11 border-slate-200 border-solid border-b px-2 py-2">
                                <div x-text="section.name" class="font-bold text-primary-light flex-none w-2/6"></div>
                                
                            </div> -->

                            <div class="h-20 justify-between bg-white  rounded-2xl font-bold flex items-center ">
                                <span x-text="section.name" class="text-lg"></span>
                                <div class="flex items-center">
                                    <span x-text="'1/1'" style="line-height:24px;text-align:center" class="mr-2 text-white text-sm rounded-full w-10 h-6 bg-378BF7"></span>
                                    <div @click="section.showSection =! section.showSection">
                                        <button type="button" class="rounded-full bg-f8f8f8 p-1 text-white shadow-sm  focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                            <svg x-show="section.showSection == false" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ursor-pointer w-5 h-5 rounded-full text-777" >
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                            </svg>
                                            <svg x-show="section.showSection == true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="cursor-pointer w-5 h-5 rounded-full text-777">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                            </svg>
                                        </button>
                                    </div>


                                </div>
                            </div>
                            
                            <pre class=" px-2 pt-2 text-sm whitespace-pre-line pb-4" x-html="section.groups[0].components[0].description" x-show="section.showSection == true">

                            </pre>

                            <div x-show="section.showSection == true" class="grid grid-cols-3 gap-3 px-2">
                                <div>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Maximum pcie x4_fh_slot:'+pageData.formData.max_pcie_x4_fh_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Maximum pcie x8_fh_slot:'+pageData.formData.max_pcie_x8_fh_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Maximum pcie x16_fh_slot:'+pageData.formData.max_pcie_x16_fh_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Maximum pcie x4_lp_slot:'+pageData.formData.max_pcie_x4_lp_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Maximum pcie x8_lp_slot:'+pageData.formData.max_pcie_x8_lp_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Maximum pcie x16_lp_slot:'+pageData.formData.max_pcie_x16_lp_slot"></pre>
                                </div>
                                <div>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Used pcie x4_fh_slot:'+pageData.fh_speed_x4"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Used pcie x8_fh_slot:'+pageData.fh_speed_x8"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Used pcie x16_fh_slot:'+pageData.fh_speed_x16"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Used pcie x4_lp_slot:'+pageData.lp_speed_x4"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Used pcie x8_lp_slot:'+pageData.lp_speed_x8"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'Used pcie x16_lp_slot:'+pageData.lp_speed_x16"></pre>
                                </div>
                                <div class="col-span-4 md:col-span-3">
                                    <pre class="text-sm whitespace-pre-line" x-text="'pcie x4_fh_slot remaining quantity:'+pageData.available_max_pcie_x4_fh_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'pcie x8_fh_slot remaining quantity:'+pageData.available_max_pcie_x8_fh_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'pcie x16_fh_slot remaining quantity:'+pageData.available_max_pcie_x16_fh_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'pcie x4_lp_slot remaining quantity:'+pageData.available_max_pcie_x4_lp_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'pcie x8_lp_slot remaining quantity:'+pageData.available_max_pcie_x8_lp_slot"></pre>
                                    <pre class="text-sm whitespace-pre-line" x-text="'pcie x16_lp_slot remaining quantity:'+pageData.available_max_pcie_x16_lp_slot"></pre>
                                </div>
                            </div>
                            
                        </div>
                    </template>

                    <!-- bom section template -->         

                    <template x-for="(item, sectionIndex) in  pageData.collectionSection">
                        <div>
                            

                                <!-- A template with a collection name of null or only one section -->    

                                <template x-if="item.section.length == 1 &&   sectionIndex == item.first_section_index-1"  >
                                    <div  >
                                        <template x-for="(section, sectionIndex) in item.section">
                                            <div class="bg-white pr-3 pl-3">
                                                <div  x-show=" section.name != 'M.2 BootDrive' && section.name != 'Rear BootDrive' && section.name != 'SAS Raid Controller'">
                                                    <div x-show="section.is_active == true " class="border-slate-200  mb-4 ">
                                                       
                                                            <div class="h-20 justify-between bg-white  rounded-2xl font-bold flex items-center ">
                                                                <span x-text="section.name" class="text-lg"></span>
                                                                <div class="flex items-center">
                                                                    <span x-text="section.finalNum+'/'+section.max" style="line-height:24px;text-align:center" :class="section.finalNum>0?'bg-378BF7':'bg-e5edf8 text-777'" class="mr-2 text-white text-sm rounded-full w-10 h-6 "></span>
                                                                    <div @click="section.showSection =! section.showSection">
                                                                        <button type="button" class="rounded-full bg-f8f8f8 p-1 text-white shadow-sm  focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                            <svg x-show="section.showSection == false" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ursor-pointer w-5 h-5 rounded-full text-777" >
                                                                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                                                            </svg>
                                                                            <svg x-show="section.showSection == true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="cursor-pointer w-5 h-5 rounded-full text-777">
                                                                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                            </svg>
                                                                        </button>
                                                                    </div>


                                                                </div>
                                                             </div>
                            
                                                        <!-- </div> -->
                                                        <!-- <template  x-for="(error, errorIndex) in section.errors">
                                                            <div class="flex mb-1">
                                                            
                                                                <div class="flex-1" span="12">
                                                                        <p class="text-red-400 flex items-center text-sm bg-red-50 py-2 px-2 rounded" x-show="error.active" x-text="error.message">
                                                                        
                                                                        </p>
                                                                    </div>

                                                                    <div class="message_col text-sm flex-1  relative leading-10 ml-2" x-show="error.active">
                                                                        <p class="cursor-pointer flex items-center flex items-center text-sm  py-2 px-2 rounded" x-on:mouseover="pageData.showFix = errorIndex" x-on:mouseout="pageData.showFix = ''">
                                                                            <span class="cursor-pointer leading-9">How to fix this</span>
                                                                        </p>
                                                                        <p x-show="errorIndex === pageData.showFix" class="absolute text-white text-xs bg-black px-2 py-2 rounded z-10" x-text="error.fix"></p>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </template> -->
                                                        <div x-show="section.showSection == true" >
                                                       
                                                            <template  x-for="(group, index) in section.groups" >
                                                                <div class="pb-4">
                                                                    <div x-text="group.name" class="font-bold mt-2 mb-2" :class="group.checkNum>0?'text-green-600':''"></div>
                                                                    <template x-for="(single, index) in group.components">
                                                                        <div class="mb-2 flex items-center  ">
                                                                        

                                                                            <!-- <select  
                                                                                x-show="section.category_name != 'cpu' && section.category_name != 'ram'"
                                                                                @change="groupNumberSelect(section.sectIndex,section,group,single,section.category_name)" 
                                                                                x-model="single.quantity"  
                                                                                x-bind:id="'select_other'+single.component_id+'_'+sectionIndex+'_'+pageData.formData.bom_id" 
                                                                                name="location" 
                                                                                class="h-9 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                                                <template x-for="select in getBaseNum(section.min, section.max, section.finalNum,section.step,single)">
                                                                                    <option x-text="select.value" ></option>
                                                                                </template>
                                                                            </select> -->

                                                                            <!-- <select 
                                                                                x-show="section.category_name == 'cpu'  || section.category_name == 'ram'"
                                                                                @change="groupNumberSelect(section.sectIndex,section,group,single,section.category_name)" 
                                                                                x-bind:id="'select_drive'+single.component_id+'_'+sectionIndex+'_'+pageData.formData.bom_id" 
                                                                                x-model="single.quantity"  name="location" class="h-9 flex-none w-16 md:w-24 block rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                                                <template x-for="select in getBaseNumRadio(section.min, section.max, section.step)">
                                                                                    <option x-text="select.value" ></option>
                                                                                </template>
                                                                            </select>
                                                            -->
                                                                        

                                                                            <div x-data="{ category:section.category_name,pageData,single }"  class="flex-1 leading-8 md:ml-2 w-full"   
                                                                            >
                                                                                <!-- x-init="single.is_checked?(document.querySelector('#select_drive'+single.component_id+'_'+sectionIndex+''+'_'+pageData.formData.bom_id).value = single.quantity,document.querySelector('#select_other'+single.component_id+'_'+sectionIndex+''+'_'+pageData.formData.bom_id).value = single.quantity):''" -->
                                                                                
                                                                                <!-- <div class="flex items-center flex-1 leading-8 ml-2" x-show="category == 'cpu'">
                                                                                    <input :id="'cpu'+section.name+single.component_id" type="radio" x-model="section.cpu" :value="single.component_id"   @change="otherComponentSelect(section.sectIndex,section,group,single)" />
                                                                                    <label :for="'cpu'+section.name+single.component_id" class="ml-2 block text-sm leading-6 text-gray-900 cursor-pointer">
                                                                                        <span x-text="single.description"></span>
                                                                                        <span class="ml-2 text-rose-600 text-sm"  x-text="single.component_id == section.cpu?'':'[$'+formatSymbol(single,section.cpuDefaultPrice)+formatPrice(single,section.cpuDefaultPrice)+'.00]'"></span>

                                                                                    </label>

                                                                                </div> -->

                                                                                 <div class="flex items-center flex-1 leading-8  w-full" x-show="category == 'cpu'">
                                                                                    <label @click.prevent="otherComponentSelect(section.sectIndex,section,group,single)" :class="single.component_id == section.cpu?'border-green-600':'border-slate-200' "  class="px-2 h-24 border  border-solid rounded-2xl  mb-2 w-full items-center mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between">
                                                                                        <span class=" text-sm" x-text="single.description"></span>
                                                                                        <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                            <!-- <span class="ml-2 font-bold  text-base" x-text="single.component_id == section.cpu?'':'[$'+formatSymbol(single,section.cpuDefaultPrice)+formatPrice(single,section.cpuDefaultPrice)+'.00]'"></span> -->
                                                                                            <div class="flex">
                                                                                                <button :disabled="single.quantity == section.min || single.quantity == 0"  @click.stop="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full bg-white p-1  shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                    </svg>

                                                                                                </button>
                                                                                                

                                                                                                <div class="px-4 " x-text="getBaseNumRadio(section.min, section.max, section.step,single)[0]"></div>
                                                                                                <button :disabled="section.max == section.finalNum " :class="section.max == section.finalNum?'bg-slate-200 text-current':'bg-indigo-600 text-white '" @click.stop="addItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full  p-1 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                    </svg>
                                                                                                </button>
                                                                                            </div>
                                                                                        </div>

                                                                                    </label>
                                                                                </div> 
                                                                                     
                                                                            

                                                                                

                                                                                <div class="flex items-center flex-1 leading-8  w-full" x-show="category == 'ram'">
                                                                                    <label  @click.prevent="otherComponentSelect(section.sectIndex,section,group,single)" :class="single.component_id == section.ram?'border-green-600':'border-slate-200' "  class="px-2 h-24 border  border-solid rounded-2xl mb-2 w-full items-center mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between">
                                                                                        <span class="  text-sm" x-text="single.description"></span>
                                                                                        <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                            <!-- <span class="ml-2 font-bold  text-base" x-text="single.component_id == section.ram?'':'[$'+formatSymbol(single,section.ramDefaultPrice)+formatPrice(single,section.ramDefaultPrice)+'.00]'"></span> -->
                                                                                            <div class="flex">
                                                                                                <button :disabled="single.quantity == section.min || single.quantity == 0" @click.stop="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)"  type="button" class="rounded-full bg-white p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                    </svg>

                                                                                                </button>
                                                                                                

                                                                                                <div class="px-4 " x-text="getBaseNumRadio(section.min, section.max, section.step,single)[0]"></div>
                                                                                                <button :disabled="section.max == section.finalNum" :class="section.max == section.finalNum?'bg-slate-200 text-current':'bg-indigo-600 text-white '" @click.stop="addItemQuantity(section.sectIndex,section,group,single,section.category_name)"  type="button" class="rounded-full  p-1  shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                    </svg>
                                                                                                </button>
                                                                                            </div>
                                                                                        </div>

                                                                                    </label>
                                                                                </div>

                                                                                <div class=" items-center  leading-8 ml-2 " x-id="['warranty-raido']" x-show="category != 'cpu' && category != 'ram'"  >
                                                                                    <label   class="border-slate-200 px-2 h-24 border  border-solid rounded-2xl mb-2 w-full items-center mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between">
                                                                                        <span class=" text-sm" x-text="single.description"></span>
                                                                                        <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                            
                                                                                            <div class="flex">
                                                                                                <button :disabled="single.quantity == 0" @click="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full bg-white p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                    </svg>

                                                                                                </button>
                                                                                                

                                                                                                <div class="px-4 " x-text="initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[0]"></div>
                                                                                                <button :disabled="single.quantity == initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[1]" :class="section.max == section.finalNum?'bg-slate-200 text-current':'bg-indigo-600 text-white '"  @click="addItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full p-1  shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                    </svg>
                                                                                                </button>
                                                                                            </div>
                                                                                        </div>

                                                                                    </label>
                                                                                </div>
                                                                                
                                                                                
                                                                            </div>
                                                                            
                                                                            
                                                                            
                                                                        </div>
                                                                    </template>
                                                                </div>
                                                            </template>
                                                        </div>
                                                    </div>
                                                <div>

                                                

                                                <div class="row mb-4" x-show="section.is_active == false ">
                                                    <div class="col-lg-12 d-flex justify-content-center">
                                                        <div
                                                        class="text-sm bg-gray-500 text-white py-2 px-2 rounded bg-gray-500"
                                                        x-text="
                                                                'This is an optional part depending on your choice of ' + pageData.formData.sections[section.sectIndex].name + 
                                                                'To see this section you should choose '+  pageData.formData.sections[section.sectIndex].name + 
                                                                ' first If your configuration does not need '+
                                                                    pageData.formData.sections[section.sectIndex-1].name + 
                                                                ' simply ignore this notification and carry on.'
                                                            "
                                                        >
                                                        </div>
                                                    
                                                    </div>
                                                </div>
                                                
                                            </div>
                                        </template>
                                        
                                    </div>

                                </template>

                                <!-- A template with the same collection name for multiple sections -->         

                                <template x-if="item.section.length>1 && item.collection_name != null && sectionIndex == item.first_section_index-1"  class="border-slate-200 border-solid border mb-4 px-2">

                                    <div class="border-slate-200  mb-4 pr-3 pl-3 bg-white">
                                    
                                            <!-- <div class="flex justify-between  h-11 border-slate-200 border-solid border-b py-2">
                                                <div x-text="item.collection_name != 'Main Storage'?item.collection_name:'Storage'" class="text-primary-light font-bold flex-none w-2/6"></div>

                                            </div> -->

                                            <div class="h-20 justify-between bg-white  rounded-2xl font-bold flex items-center ">
                                                <span x-text="item.collection_name != 'Main Storage'?item.collection_name:'Storage'" class="text-lg"></span>
                                                <div class="flex items-center" @click="item.showSection =! item.showSection">
                                                    <!-- <span x-text="section.finalNum+'/'+section.max" style="line-height:24px;text-align:center" class="mr-2 text-white text-sm rounded-full w-10 h-6 bg-378BF7"></span> -->
                                                
                                                    <button type="button" class="rounded-full bg-f8f8f8 p-1 text-white shadow-sm  focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                        <svg x-show="item.showSection == false" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ursor-pointer w-5 h-5 rounded-full text-777" >
                                                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                                        </svg>
                                                        <svg x-show="item.showSection == true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="cursor-pointer w-5 h-5 rounded-full text-777">
                                                            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                        </svg>
                                                    </button>


                                                </div>
                                             </div>
                                                
                                            <div class="flex justify-between  h-11 border-slate-200 border-solid border-b py-2 storage-tab" x-show="item.collection_name == 'Main Storage' && item.showSection == true">
                                                    
                                                <div class="flex cursor-pointer">
                                                    <div :class="item.IsShowStorageType == 'drive'?'text-green-600':''"   @click="changeShowStorage(item,'drive')"  x-text="'Main Storage'" class="flex-none w-2/6"></div>
                                                    <div :class="item.IsShowStorageType == 'controller'?'text-green-600':''"   @click="changeShowStorage(item,'controller')"  x-show="pageData.raid_controller_section.length>0"  x-text="'Raid Controller'" class="flex-none w-2/6 ml-4"></div>
                                                    <div :class="item.IsShowStorageType == 'raid_set_up'?'text-green-600':''"   @click="changeShowStorage(item,'raid_set_up')"  x-show="pageData.raid_controller_section.length>0"  x-text="'Raid Set Up'" class="flex-none w-2/6 ml-4"></div>

                                                </div>
                                            
                                                
                                                <template x-for="(section, tabIndex) in item.section">
                                                    <div class="flex justify-end  w-1/2 drive_bays"  x-show="item.tabIndex == tabIndex &&  item.IsShowStorageType == 'drive'">
                                                        <div  x-text="'Drive Bays:'" ></div>
                                                        <!-- <div  class="w-24 md:w-1/3 h-25 progress bg-current font-bold " >
                                                            <div class="progress_inner text-666"   x-bind:style="{width:section.total_bays_num_percent + '%' }" >
                                                                <i class="pl-2"  x-text=" section.occupy_bays_number + '/'+ pageData.formData.front_max_drives"></i>
                                                            </div>
                                                        </div> -->
                                                        <span x-text=" section.occupy_bays_number + '/'+ pageData.formData.front_max_drives" style="line-height:24px;text-align:center" :class="section.occupy_bays_number>0?'bg-378BF7':'bg-e5edf8 text-777'" class=" inline-block mr-2 text-white text-sm rounded-full w-10 h-6 "></span>

                                                    </div>
                                                </template>
                                            </div>
                                            
                                            <!-- raid controller section -->
                                            <div x-show="pageData.raid_controller_section.length && item.IsShowStorageType == 'controller' && item.collection_name == 'Main Storage' && item.showSection == true">
                                                
                                                <div id="Storage">

                                                    <div class=" justify-between flex py-4 border-slate-200 border-solid border-b mb-4">
                                                        <nav class="-mb-px flex space-x-8 " aria-label="Tabs">
                                                            <template x-for="(tab,tabIndex) in  pageData.raid_controller_section">
                                                                <div class="relative mr-4">
                                                                    <a x-text="tab.name" 
                                                                    class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 whitespace-nowrap cursor-pointer  text-[#000] px-1 text-sm font-medium" 
                                                                    :class="pageData.bootDriveIndex == tabIndex?'text-green-600':''" ></a>

                                                                </div>

                                                            </template>
                                                        </nav>
                                                        <template x-for="(tab,tabIndex) in  pageData.raid_controller_section">
                                                            <div  x-show="pageData.bootDriveIndex == tabIndex">
                                                                <span x-text="tab.finalNum+'/'+tab.max" style="line-height:24px;text-align:center" :class="tab.finalNum>0?'bg-378BF7':'bg-e5edf8 text-777'" class=" inline-block mr-2 text-white text-sm rounded-full w-10 h-6 "></span>

                                                            </div>
                                                        </template>
                                                    </div>
                                                    <template x-for="(section, storageSectionIndex) in pageData.raid_controller_section">
                                                        <div x-show="pageData.bootDriveIndex == storageSectionIndex">
                                                            <!-- <template  x-for="(error, errorIndex) in section.errors">
                                                                <div class="flex mb-1">
                                                                
                                                                    <div class="flex-1" span="12">
                                                                            <p class="text-red-400 flex items-center text-sm bg-red-50 py-2 px-2 rounded" x-show="error.active" x-text="error.message">
                                                                            
                                                                            </p>
                                                                        </div>

                                                                        <div class="message_col text-sm flex-1  relative leading-10 ml-2" x-show="error.active">
                                                                            <p class="cursor-pointer flex items-center flex items-center text-sm  py-2 px-2 rounded" x-on:mouseover="pageData.showFix = errorIndex" x-on:mouseout="pageData.showFix = ''">
                                                                                <span class="cursor-pointer leading-9">How to fix this</span>
                                                                            </p>
                                                                            <p x-show="errorIndex === pageData.showFix" class="absolute text-white text-xs bg-black px-2 py-2 rounded z-10" x-text="error.fix"></p>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </template> -->

                                                            <template  x-for="(group, index) in section.groups">
                                                                    <div class="pb-4">
                                                                        <div x-text="group.name" class="font-bold my-2" :class="group.checkNum>0?'text-green-600':'' " ></div>
                                                                        <template x-for="(single, index) in group.components">
                                                                            <div class="mb-2 flex items-center h-24 border border-slate-200 border-solid rounded-2xl px-2">

                                                                                <!-- <select 
                                                                                    @change="groupNumberSelect(section.sectIndex,section,group,single,section.category_name)" 
                                                                                    x-model="single.quantity"  
                                                                                    x-bind:id="'select_raid'+single.component_id+'_'+storageSectionIndex+'_'+pageData.formData.bom_id" 
                                                                                    name="location" 
                                                                                    class="h-9 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                                                    <template x-for="select in getBaseNum(section.min, section.max, section.finalNum,section.step,single)">
                                                                                        <option x-text="select.value" ></option>
                                                                                    </template>
                                                                                </select> -->

                                                                                <div x-data="{ category:section.category_name }"  class="w-full"  
                                                                                 >
                                                                                    <!-- x-init="single.is_checked?document.querySelector('#select_raid'+single.component_id+'_'+storageSectionIndex+''+'_'+pageData.formData.bom_id).value = single.quantity:''" -->
                                                                                    
                                                                                    <!-- <div class="flex items-center flex-1 leading-8 ml-2" x-show="category != 'cpu' && category != 'ram'">
                                                                                        <label   class="ml-2 mb-2 mt-2 block text-sm  leading-6 text-gray-900 mb-0 cursor-pointer"><span x-text="single.description"></span>
                                                                                        </label>
                                                                                    </div> -->
                                                                                    <div class="flex items-center flex-1 leading-8  w-full" >
                                                                                        <label   class=" mb-2 w-full items-center mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between">
                                                                                            <span class=" text-sm" x-text="single.description"></span>
                                                                                            <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                                
                                                                                                <div class="flex">
                                                                                                    <button :disabled="single.quantity == 0"  @click="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full bg-white p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                        </svg>

                                                                                                    </button>
                                                                                                    

                                                                                                    <div class="px-4 " x-text="initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[0]"></div>
                                                                                                    <button :disabled="single.quantity == initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[1]" :class="section.max == section.finalNum?'bg-slate-200 text-current':'bg-indigo-600 text-white '" @click="addItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full  p-1  shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                            <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                        </svg>
                                                                                                    </button>
                                                                                                </div>
                                                                                            </div>

                                                                                        </label>
                                                                                    </div>
                                                                                    <template x-for="(attr,attr_index) in single.attributes" :key="attr_index">
                                                                                        <span>
                                                                                            <b x-show="attr.attribute_code == 'form_factor'" x-text="'Form Factor' +':'+attr.value" class="text-rose-600"></b>
                                                                                            <b x-show="attr.attribute_code == 'pcie_slot_width'" x-text="'Pcie Slot Width' +':'+attr.value" class="text-rose-600"></b>
                                                                                            <b x-show="attr.attribute_code == 'pcie_speed'" x-text="'Pcie Speed' +':'+attr.value" class="text-rose-600"></b>
                                                                                        </span>
                                                                                            
                                                                                    </template>
                                                                                </div>




                                                                                
                                                                                
                                                                                
                                                                                
                                                                            </div>
                                                                        </template>
                                                                        
                                                                    </div>
                                                            </template>
                                                        </div>
                                                
                                                    </template>

                                                </div>
                                            </div>
                                            
                                            <!-- Put sections with the same collection name together -->

                                            <div x-show=" item.IsShowStorageType == 'drive' && item.showSection == true">
                                            

                                                <div class=" justify-between flex py-4 border-slate-200 border-solid border-b mb-4">
                                                    <nav class="-mb-px flex space-x-8 " aria-label="Tabs">
                                                        <template x-for="(tab,tabIndex) in  item.section">
                                                            <div class="relative mr-4" >
                                                                <a x-text="tab.name" 
                                                                
                                                                @click="changeTab(item,tabIndex,tab)" 
                                                                class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 whitespace-nowrap cursor-pointer  text-[#000] px-1 text-sm font-medium" 
                                                                :class="item.tabIndex == tabIndex?'text-green-600':''"  ></a>

                                                            </div>

                                                        </template>

                                                        

                                                    </nav>
                                                    <template x-for="(tab,tabIndex) in  item.section">
                                                        <div class="flex justify-end md:w-1/3" x-show="item.tabIndex  == tabIndex ">
                                                            <!-- <div x-text="'Min:'+tab.min" class="mr-2"></div> -->
                                                            <div  >
                                                                <!-- <div class="progress_inner text-666"   x-bind:style="{width:tab.storage_bays_percent + '%'}" x-show="item.collection_name == 'Main Storage'">
                                                                    <i class="pl-2" x-text="tab.finalNum+'/'+ChangeTabBayNum(tab.min, tab.max,tab.baysNum, tab.step,tab.finalNum)"></i>
                                                                </div> -->
                                                                <div >
                                                                    <span x-text="tab.finalNum+'/'+ChangeTabBayNum(tab.min, tab.max,tab.baysNum, tab.step,tab.finalNum)" style="line-height:24px;text-align:center" :class="tab.finalNum>0?'bg-378BF7':'bg-e5edf8 text-777'" class=" inline-block mr-2 text-white text-sm rounded-full w-10 h-6 "></span>

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </template>
                                                

                                                </div>

                                                <template x-for="(section, tabIndex) in item.section">
                                                    <div >
                                                        <div x-show="item.tabIndex == tabIndex ">
                                                        
                                                            <div x-show="section.is_active == true">
                                                                <!-- <template  x-for="(error, errorIndex) in section.errors">
                                                                    <div class="flex mb-1">
                                                                    
                                                                        <div class="flex-1" span="12">
                                                                                <p class="text-red-400 flex items-center text-sm bg-red-50 py-2 px-2 rounded" x-show="error.active" x-text="error.message">
                                                                                
                                                                                </p>
                                                                            </div>

                                                                            <div class="message_col text-sm flex-1  relative leading-10 ml-2" x-show="error.active">
                                                                                <p class="cursor-pointer flex items-center flex items-center text-sm  py-2 px-2 rounded" x-on:mouseover="pageData.showFix = errorIndex" x-on:mouseout="pageData.showFix = ''">
                                                                                    <span class="cursor-pointer leading-9">How to fix this</span>
                                                                                </p>
                                                                                <p x-show="errorIndex === pageData.showFix" class="absolute text-white text-xs bg-black px-2 py-2 rounded z-10" x-text="error.fix"></p>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </template> -->

                                                                <template  x-for="(group, index) in section.groups">
                                                                        <div class="pb-4">
                                                                            <div x-text="group.name" class="font-bold my-2" :class="group.checkNum>0?'text-green-600':'' " ></div>

                                                                            <template x-for="(single, index) in group.components">

                                                                                <div class="mb-2 flex items-center h-24 border border-slate-200 border-solid rounded-2xl px-2">

                                                                                    <!-- <select x-show="item.collection_name == 'Main Storage'"
                                                                                        @change="groupNumberSelect(section.sectIndex,section,group,single,section.category_name)" 
                                                                                        x-model="single.quantity"  
                                                                                        x-bind:id="'select_main'+single.component_id+'_'+tabIndex+'_'+pageData.formData.bom_id" 
                                                                                        name="location"
                                                                                        class="h-9 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                                                        <template x-for="select in getBaseNum(section.min, ChangeTabBayNum(section.min, section.max,section.baysNum, section.step,section.finalNum), section.finalNum,section.step,single)">
                                                                                            <option x-text="select.value" ></option>
                                                                                        </template>
                                                                                    </select> -->

                                                                                    <!-- <select  x-show="item.collection_name != 'Main Storage'" 
                                                                                        @change="groupNumberSelect(section.sectIndex,section,group,single,section.category_name)" 
                                                                                        x-model="single.quantity"  
                                                                                        x-bind:id="'select_other'+single.component_id+'_'+tabIndex+'_'+pageData.formData.bom_id" 
                                                                                        name="location" 
                                                                                        class="h-9 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                                                        <template x-for="select in getBaseNum(section.min, section.max, section.finalNum,section.step,single)">
                                                                                            <option x-text="select.value" ></option>
                                                                                        </template>
                                                                                    </select> -->

                                                                                    <div x-data="{ category:section.category_name }" class="w-full"
                                                                                    >
                                                                                        <!-- x-init="single.is_checked?(document.querySelector('#select_main'+single.component_id+'_'+tabIndex+''+'_'+pageData.formData.bom_id).value = single.quantity,document.querySelector('#select_other'+single.component_id+'_'+tabIndex+''+'_'+pageData.formData.bom_id).value = single.quantity):''" -->

                                                                                        <div class="flex items-center flex-1 leading-8  w-full" x-show="category != 'cpu' && category != 'ram'">
                                                                                            <!-- <input x-show="item.collection_name != 'Main Storage'" :id="'other'+section.name+single.component_id" type="checkbox" x-model="single.is_checked" :value="single.component_id" checked="single.is_checked"  @change="groupItemSelect(section.sectIndex,section,group,single)"/> -->

                                                                                            <label x-show="item.collection_name == 'Main Storage'"   class=" mb-2 items-center w-full  mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between">
                                                                                                <span class=" text-sm" x-text="single.description"></span>
                                                                                                
                                                                                                <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                                    
                                                                                                    <div class="flex">
                                                                                                        <button :disabled="single.quantity == 0"   @click="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full bg-white p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                            </svg>

                                                                                                        </button>
                                                                                                        <div class="px-4 " x-text="initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[0]"></div>
                                                                                                        <button type="button" :disabled="single.quantity == initSingleQuantity(section.min, ChangeTabBayNum(section.min, section.max,section.baysNum, section.step,section.finalNum), section.finalNum,section.step,single)[1]" :class="single.quantity ==initSingleQuantity(section.min, ChangeTabBayNum(section.min, section.max,section.baysNum, section.step,section.finalNum), section.finalNum,section.step,single)[1]?'bg-slate-200 text-current':'bg-indigo-600 text-white '" @click="addItemQuantity(section.sectIndex,section,group,single,section.category_name)" class="rounded-full  p-1  shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                                <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                            </svg>
                                                                                                        </button>
                                                                                                    </div>
                                                                                                </div>
                                                                                            </label>

                                                                                            <!-- <label x-show="item.collection_name != 'Main Storage'" :for="'other'+section.name+single.component_id"  class="ml-2 mb-2 mt-2 block text-sm  leading-6 text-gray-900 mb-0 cursor-pointer"><span x-text="single.description"></span>
                                                                                                <span class="ml-2 text-sm text-rose-600" x-text="'[$'+formatPrice(single,0)+'.00]'"></span>
                                                                                            </label> -->

                                                                                            <label x-show="item.collection_name != 'Main Storage'"  class=" mb-2 items-center w-full justify-between mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between
                                                                                            ">
                                                                                                <span class=" text-sm" x-text="single.description"></span>
                                                                                                <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                                    
                                                                                                    <div class="flex">
                                                                                                    
                                                                                                        <button :disabled="single.quantity == 0"  @click="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full bg-white p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                            </svg>

                                                                                                        </button>
                                                                                                        <div class="px-4 " x-text="initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[0]"></div>
                                                                                                        <button :disabled="single.quantity == initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[1]" :class="section.max == section.finalNum?'bg-slate-200 text-current':'bg-indigo-600 text-white '" @click="addItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full p-1  shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                                <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                            </svg>
                                                                                                        </button>
                                                                                                    </div>
                                                                                                </div>

                                                                                            </label>


                                                                                        </div>
                                                                                        <template x-for="(attr,attr_index) in single.attributes" :key="attr_index">
                                                                                            <span>
                                                                                                <b x-show="attr.attribute_code == 'form_factor'" x-text="'Form Factor' +':'+attr.value" class="text-rose-600"></b>
                                                                                                <b x-show="attr.attribute_code == 'pcie_slot_width'" x-text="'Pcie Slot Width' +':'+attr.value" class="text-rose-600"></b>
                                                                                                <b x-show="attr.attribute_code == 'pcie_speed'" x-text="'Pcie Speed' +':'+attr.value" class="text-rose-600"></b>
                                                                                            </span>
                                                                                                
                                                                                        </template>
                                                                                        
                                                                                    </div>
                                                                                    
                                                                                    
                                                                                    
                                                                                </div>
                                                                            </template>
                                                                        
                                                                            
                                                                        </div>
                                                                </template>
                                                            
                                                            </div>
                                                        </div>
                                                        <div class="row" x-show='section.is_active != true'>
                                                            <div class="col-lg-12 d-flex justify-content-center">
                                                                <div
                                                                class="text-sm bg-gray-500 text-white py-2 px-2 rounded bg-gray-500"
                                                                x-text="
                                                                        'This is an optional part depending on your choice of ' + pageData.formData.sections[sectionIndex-1].name + 
                                                                        'To see this section you should choose '+  pageData.formData.sections[sectionIndex-1].name + 
                                                                        ' first If your configuration does not need '+
                                                                            pageData.formData.sections[sectionIndex-1].name + 
                                                                        ' simply ignore this notification and carry on.'
                                                                    "
                                                                >
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                
                                                </template>
                                            </div>

                                             <!-- raid set up section -->

                                             <div x-show="item.IsShowStorageType == 'raid_set_up' && item.showSection == true">
                                                    <div class="pt-4 pb-2">
                                                        <div x-text="'Drives'"></div>
                                                        <template x-for="storage_drive in  pageData.driveSelected">
                                                            <div>
                                                                <div >
                                                                    <span class="text-rose-600" x-text="storage_drive.quantity"></span>
                                                                    <span class="text-sm"  x-text="storage_drive.name"></span>
                                                                </div>
                                                            </div>
                                                        </template>
                                                    </div>

                                                    <div class="mt-4">
                                                        <div x-text="'Raid Controllers'" class="mb-2"></div>
                                                        <template x-for="controller in  pageData.raidControllerSelected">
                                                            <div class=" p-2">
                                                                <div class="flex justify-between">
                                                                
                                                                    <div class="text-gray-600 ">
                                                                        <span x-text="controller.name"></span>
                                                                    </div>
                                                                    <div class="text-right">
                                                                        <button type="button" @click="showVolumeDialog(controller)"  class="h-35 rounded-md bg-indigo-600 px-3  text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" x-text="'Create A Volume'"></button>
                                                                        <button type="button"  @click="showHotSpareDialog(controller)" class="h-35 rounded-md bg-indigo-600 px-3  text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" x-show="controller.has_hot_swap == false" x-text="'Global Hot Spare'"></button>
                                                                    </div>
                                                                </div>
                                                              
                                                                <!-- Raid Volume -->
                                                                
                                                                <div x-show="controller.has_volume == true && controller.drives.length>0"  class="mt-2">
                                                                    <template  x-for="( radDrive, radDriveIndex ) in controller.drives" :key="radDriveIndex" :span="23" style="margin-top: 2%">
                                                                        <div  class="mt-4 flex justify-between items-center" >
                                                                            <div style="display:flex !important;" class="items-center">
                                                                                <div class="w-96">
                                                                                    <p style="font-size: 14px">
                                                                                        <span class="text-rose-600" style="font-size: 18px" x-text="radDrive.quantity"></span>
                                                                                        <span x-text="radDrive.drive.name"></span>
                                                                                    </p>
                                                                                </div>
                                                                                <div class="ml-2">
                                                                                    <div>
                                                                                        <span class="text-sm mr-2" x-text="'Raid Type'"></span>
                                                                                        <select size="small" class="cursor-default rounded-md pt-0 pb-0 py-0.5 pl-2.5 pr-4 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none border border-gray-300 focus:ring-indigo-500 sm:text-sm sm:leading-6 w-24" x-model="radDrive.raidType" @change=" alignRaidType(controller, radDrive) ">
                                                                                            <template x-for="item in steppingRaidType(controller)">
                                                                                                    <option x-text="item.type"  x-value="item.type" ></option>
                                                                                            </template>
                                                                                        </select>
                                                                                    </div>
                                                                                    <div class="text-xs leading-6">
                                                                                        <span x-text="radDrive.raidMessage"></span>
                                                                                        <span class="text-rose-600" style="font-size: 14px" x-text="radDrive.calMesaage "></span>
                                                                                        <span class="text-rose-600" style="font-size: 14px" x-text="radDrive.errorMessage"></span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                            <div :span="5" class="text-right">
                                                                                <span class="text-rose-600 mr-2" style="font-size: 14px" x-text="'Raid Volume'"></span>
                                                                                <button size="small" type="danger" @click.prevent="removeVolumen(controller,radDrive,radDriveIndex)" round class="ml-2 bg-red-500 hover:bg-red-600 text-white text-sm leading-5 px-2 py-2 rounded">
                                                                                    Remove
                                                                                </button>
                                                                            </div>
                                                                        </div>
                                                                    </template>
                                                                </div>

                                                                <!-- Global HOT Spare -->
                                                                <template :span="23" style="margin-top: 2%" x-if="controller.has_hot_swap == true && controller.hot_swap != '' && controller.hot_swap.drive" class="mt-2">
                                                                    <div class="flex mt-4 justify-between items-center" shadow="always">
                                                                        <div :span="18">
                                                                            <p style="font-size: 14px">
                                                                                <span class="text-rose-600" style="font-size: 18px" x-text="controller.hot_swap.quantity"></span>
                                                                                <span x-text="controller.hot_swap.drive.name"></span>
                                                                            </p>
                                                                        </div>
                                                                        <div :span="5" class="text-right">
                                                                            <span class="text-rose-600" style="font-size: 14px">Global HOT Spare</span>
                                                                            <button size="small" type="danger" @click.prevent="removeHotSwap(controller)" round class="ml-2 bg-red-500 hover:bg-red-600 text-white text-sm leading-5 px-2 py-2 rounded">Remove</button>
                                                                        </div>
                                                                    </div>
                                                                </template>

                                                            </div>
                                                        </template>
                                                    </div>
                                                
                                            </div>

                                            <!-- BootDrive section -->

                                            <div x-show="pageData.bootDriveSection.length && item.collection_name == 'Main Storage' &&  item.IsShowStorageType == 'drive' && item.showSection == true">
                                                <div class=" flex h-11 border-slate-200 border-solid border-b px-2 py-2">
                                                        <div x-text="'BootDrive'"></div>
                                                </div>
                                                <div id="Storage">
                                                    
                                                    <div class=" justify-between flex py-4 border-slate-200 border-solid border-b mb-4">
                                                        <nav class="-mb-px flex space-x-8 " aria-label="Tabs">
                                                            <template x-for="(tab,tabIndex) in  pageData.bootDriveSection">
                                                                <div class="relative mr-4">
                                                                    <a x-text="tab.name" 
                                                                    @click="changeBootDrive(tabIndex,tab)" 
                                                                    class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 whitespace-nowrap cursor-pointer  text-[#000] px-1 text-sm font-medium" 
                                                                    :class="pageData.bootDriveIndex == tabIndex?'text-green-600':''" ></a>

                                                                </div>

                                                            </template>
                                                        </nav>
                                                        <template x-for="(tab,tabIndex) in  pageData.bootDriveSection">
                                                            <div x-show="pageData.bootDriveIndex == tabIndex">
                                                                <span x-text="tab.finalNum+'/'+tab.max" style="line-height:24px;text-align:center" :class="tab.finalNum>0?'bg-378BF7':'bg-e5edf8 text-777'" class=" inline-block mr-2 text-white text-sm rounded-full w-10 h-6 "></span>
                                                            </div>
                                                        </template>
                                                    </div>
                                                    <template x-for="(section, storageSectionIndex) in pageData.bootDriveSection">
                                                        <div x-show="pageData.bootDriveIndex == storageSectionIndex">
                                                            <!-- <template  x-for="(error, errorIndex) in section.errors">
                                                                <div class="flex mb-1">
                                                                
                                                                    <div class="flex-1" span="12">
                                                                            <p class="text-red-400 flex items-center text-sm bg-red-50 py-2 px-2 rounded" x-show="error.active" x-text="error.message">
                                                                            
                                                                            </p>
                                                                        </div>

                                                                        <div class="message_col text-sm flex-1  relative leading-10 ml-2" x-show="error.active">
                                                                            <p class="cursor-pointer flex items-center flex items-center text-sm  py-2 px-2 rounded" x-on:mouseover="pageData.showFix = errorIndex" x-on:mouseout="pageData.showFix = ''">
                                                                                <span class="cursor-pointer leading-9">How to fix this</span>
                                                                            </p>
                                                                            <p x-show="errorIndex === pageData.showFix" class="absolute text-white text-xs bg-black px-2 py-2 rounded z-10" x-text="error.fix"></p>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </template> -->

                                                            <template  x-for="(group, index) in section.groups">
                                                                <div class="pb-4">
                                                                    <div x-text="group.name" class="font-bold my-2" :class="group.checkNum>0?'text-green-600':'' " ></div>
                                                                    <template x-for="(single, index) in group.components">
                                                                        <div class=" flex items-center h-24 border border-slate-200 border-solid rounded-2xl px-2 mb-2">

                                                                            <!-- <select 
                                                                                @change="groupNumberSelect(section.sectIndex,section,group,single,section.category_name)" 
                                                                                x-model="single.quantity"  
                                                                                x-bind:id="'select'+single.component_id+'_'+storageSectionIndex+'_'+pageData.formData.bom_id" 
                                                                                name="location" 
                                                                                class="h-9 flex-none w-16 md:w-24 block  rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                                                                <template x-for="select in getBaseNum(section.min, section.max, section.finalNum,section.step,single)">
                                                                                    <option x-text="select.value" ></option>
                                                                                </template>
                                                                            </select> -->

                                                                            <div x-data="{ category:section.category_name }"  class="w-full " 
                                                                            >
                                                                                <!-- x-init="single.is_checked?document.querySelector('#select'+single.component_id+'_'+storageSectionIndex+''+'_'+pageData.formData.bom_id).value = single.quantity:''" -->
                                                                                
                                                                                    <!-- <label   class="ml-2 mb-2 mt-2 block text-sm  leading-6 text-gray-900 mb-0 cursor-pointer"><span x-text="single.description"></span>
                                                                                    </label> -->
                                                                                    <label   class=" mb-2 w-full items-center mt-2 block text-base leading-6 text-gray-900 mb-0 cursor-pointer flex justify-between">
                                                                                        <span class="text-sm" x-text="single.description"></span>
                                                                                        <div class="flex col-span-1 md:col-span-1 justify-between">
                                                                                            
                                                                                            <div class="flex">
                                                                                                <button :disabled="single.quantity == 0"  @click="cancelItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full bg-white p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true" stroke="currentColor" class="h-5 w-5 text-777">
                                                                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                                                                                    </svg>

                                                                                                </button>
                                                                                                <div class="px-4 " x-text="initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[0]"></div>
                                                                                                <button :disabled="single.quantity == initSingleQuantity(section.min, section.max, section.finalNum,section.step,single)[1]" :class="section.max == section.finalNum?'bg-slate-200 text-current':'bg-indigo-600 text-white '" @click="addItemQuantity(section.sectIndex,section,group,single,section.category_name)" type="button" class="rounded-full  p-1 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                                                                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                                                                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                                                                                    </svg>
                                                                                                </button>
                                                                                            </div>
                                                                                        </div>

                                                                                    </label>
                                                                                </div>
                                                                                
                                                                            </div>
                                                                            
                                                                            
                                                                            
                                                                        </div>
                                                                    </template>
                                                                    
                                                                </div>
                                                            </template>
                                                        </div>
                                                
                                                    </template>

                                                </div>
                                            <div>
                                    </div>


                                </template> 
                                                                


                        
                                
                            
                        </div>
                    </template> 


                    
                                            











                    <!-- warranty section template -->                    

                    <div class="mb-6 bg-white  border-slate-200 border-solid  pr-3 pl-3  py-2 rounded-2xl" id="Warranty">
                        <div class="h-20 justify-between bg-white  rounded-2xl font-bold flex items-center ">
                            <span x-text="'Warranty'" class="text-lg"></span>
                            <div class="flex items-center">
                                <span x-text="'1/1'" style="line-height:24px;text-align:center" class="mr-2 text-white text-sm rounded-full w-10 h-6 bg-378BF7"></span>
                               
                                
                                <button @click="pageData.showWarranty =!pageData.showWarranty" type="button" class="rounded-full bg-f8f8f8 p-1 text-white shadow-sm  focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                    <svg x-show="pageData.showWarranty == false" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="cursor-pointer w-5 h-5 rounded-full text-777" >
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                    </svg>
                                    <svg x-show="pageData.showWarranty == true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="cursor-pointer w-5 h-5 rounded-full text-777">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
                                    </svg>

                                </button>



                            </div>
                        </div>
                        
                        <div class="mb-6" x-show="pageData.showWarranty == true">
                            <div class="mb-6 ">
                                <p>
                                    DiGiCOR has an exclusive partner network in regional areas of Australia,
                                    if your system will be located in the regional area, 
                                    please choose one of the options below, 
                                    then click “Get a Quote” button, specify the post code and warranty type under “Required Information”,
                                    we will submit a quotation with the support cost for your region.</p>
                            </div>
                            <template x-for="(item, index) in pageData.formData.warranties" :key="index">
                                <div class="mt-6" x-show="item.is_hidden == false">
                                    <p class="font-bold"  x-text="item.name" ></p>
                                    <div class="mt-4 flex items-center" x-id="['warranty-raido']">
                                        <input :id="'Warranty'+item.warranty_id"  type="radio" @change="warrantyChange(item)" x-model="data.warranty_id" :value="item.warranty_id"/>
                                        <label :for="'Warranty'+item.warranty_id" class="ml-3 block text-sm  leading-6 text-gray-900 cursor-pointer"><span x-text="item.description"></span></label>
                                        <!-- <p class="text-rose-600 ml-2"  x-show="warrantyPrice(Math.round(parseFloat(item.default-totalPrice('init')[2]))) != 0.00" x-text="'[$'+ warrantySymbol( item.default)+ warrantyPrice(Math.round(parseFloat(item.default-totalPrice('init')[2])))+'.00]'"></p> -->
                                    

                                    </div>

                                </div>

                            </template>
                        </div>
                    </div>
                </div>
                <!-- Customization section  and Summary section template  -->           
                <div class="col-span-1 md:col-span-1 pl-6 mobile-configure px-4">
                       
                        <div class="bg-white p-3 rounded-xl max-h-440 overflow-y-scroll">
                       
                            <div x-text="'Your configuration'" class="text-lg pb-2 font-bold mb-2"></div>
                            <template x-for="(item, index) in pageData.selectItemArray" >
                                <div class="mb-2">
                                    <p x-show="item.section != ''" x-text="item.section" class="font-bold"></p>
                                    <div class="flex mt-2 justify-between">
                                       
                                        <pre x-show="item.section == 'BareBom'" class=" px-2  whitespace-pre-line text-sm mt-0.5"  x-text="item.id"></pre>
                                        <p x-show="item.section != 'BareBom'" class=" px-2  whitespace-pre-line text-sm mt-0.5"  x-text="item.id"></p>
                                        <span class="text-rose-600 font-bold" x-text="item.quantity"></span>
                                    </div>
                                

                                </div>
                            
                            </template>
                            <div>
                                <p  x-text="'Accessories'" class="font-bold"></p>
                                <template x-for="(item, index) in pageData.accessories" >
                                    <div class="mb-2">
                                    
                                        <p>
                                            <span class="text-rose-600 font-bold" x-text="item.quantity"></span>
                                            <span class="text-sm" x-text="item.sku"></span>
                                        </p>
                                    

                                    </div>
                                
                                </template>
                            </div>
                        </div>
                        <div class="rounded-2xl mb-6 p-4 bg-primary-lighter">
                            <div x-text="'Total'" class="font-bold text-lg pb-2  mb-2"></div>
                            <div class="mb-2 ">
                                <!-- <span class="text-sm" x-text="'Price includes GST and warranty'"></span> -->
                                <span class="text-sm block" x-text="'Ex GST'"></span>
                                <span x-text="'A$'+changePrice(pageData.finalPrice) " class="font-bold text-lg"></span>
                            </div>

                            <div class="mb-2 grid grid-cols-3 gap-4">
                                
                                <input type="number"  name="number" :value="'1'" :min="'1'" placeholder="Quantity"  x-model="pageData.quantity"   id="email" style="height:48px" class=" w-100 block rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                                <div class='col-span-2 md:col-span-2 mobile-btn   my-4 sm:mt-0 lg:justify-start'>
                                    <button type="button"  x-show="pageData.errorStatus==false" @click="addCart" class="py-3 btn block w-full rounded-full btn-primary px-3  text-base font-semibold text-white shadow-sm  " x-text="'Add to Cart'"></button>
                                    <button type="button"  x-show="pageData.errorStatus==true" @click="quoteUs" class="py-3 btn block w-full rounded-full btn-secondary  px-3  text-base font-semibold  shadow-sm  " x-text="'Request a quote'"></button>
                                </div>

                            </div>
                            <div>
                                <!-- <button type="button"  class="py-3 border-solid border-[#191B7C] border block w-full rounded-full px-3  text-base font-semibold text-[#191B7C] shadow-sm  " x-text="'Save for later'"></button> -->
                                <div  class="text-center py-2 flex items-center justify-center text-378BF7 cursor-pointer">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                    </svg>

                                    <span x-text="'Request a quote'"></span>
                                </div>
                            </div>
                            
                        </div>
                    

                </div>
            
                <div class="relative z-10" id="error_dialog" aria-labelledby="modal-title" role="dialog" aria-modal="true" style="display:none">
    
                    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

                    <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
                        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                        
                        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                            <div class="absolute right-0 top-0 hidden pr-4 pt-2 sm:block">
                            <button type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" @click="pageData.showErrorDialog = false">
                                <span class="sr-only">Close</span>
                                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                            </div>
                            <div class="sm:flex sm:items-start">
                            <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                                <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                                </svg>
                            </div>
                            <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                                <div class="mt-4">
                                    <p class="text-sm text-gray-500">Your Config Sections  have error, Please fix before continue</p>
                                </div>
                            </div>
                            </div>
                            
                        </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
       

    
    
    
    </template>
</div>

<style>
    .ring-1{
        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    }
    .ring-gray-300 {
        --tw-ring-opacity: 1;
        --tw-ring-color: rgb(209 213 219 / var(--tw-ring-opacity));
    }
    .leading-8 {
        line-height: 2rem;
    }
    .text-rose-600{
        color:#dc143c;
    }
    .text-green-600{
        color:rgb(22 163 74 / var(--tw-text-opacity))
    }
    .pr-10 {
        padding-right: 2.5rem;
    }
    .w-24 {
        width: 6rem;
    }
    .bg-indigo-600{
        background:#2463eb
    }
    .w-100{
        width:100px
    }
    .text-red-400{
        color:rgb(248 113 113 / var(--tw-text-opacity));
    }
    .bg-red-50 {
        --tw-bg-opacity: 1;
        background-color: rgb(254 242 242 / var(--tw-bg-opacity));
    }
    .whitespace-pre-line {
        white-space: pre-line;
    }
    .bg-gray-500 {
        --tw-bg-opacity: 1;
        background-color: rgb(107 114 128 / var(--tw-bg-opacity));
    }
    .bg-gray-100{
        --tw-bg-opacity: 1;
        background-color:rgb(241 241 241/var(--tw-bg-opacity))
    }
    .float-right{
        float: right;
    }
    .bg-checked{
        --tw-text-opacity: 1;
        color:rgb(150 25 25/var(--tw-text-opacity))
    }
    .bg-none-checked{
      
        --tw-text-opacity: 1;
        color: rgb(167 168 169 / var(--tw-text-opacity));

    }
    .show_more_option{
        height:128px;
        background: linear-gradient(180deg, hsla(0, 0%, 100%, 0), hsla(0, 0%, 100%, .45) 40%, #fff 65%);



    }
    .transform{
        left: 50%;
        --tw-translate-x: -50%;
        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    }
    .text-slate-500{
        color: rgb(100 116 139);
    }
    .w-140{
        width:140px;
        
    }
    .h-20{
        height:80px
    }
    .h-25{
        height:25px;
    }
    .h-35{
        height:35px;
    }
    .progress{
        background:#efefef
    }
    .progress_inner{
        background:#409eff!important
    }
    .text-666{
        color:#666
    }
    .product-content-digicor{
        width:100vw;
        margin-left:-3rem;
        /* padding:0 0.5rem; */
    }

    @media (min-width: 768px) {
        .product-content-digicor{
            width:auto;
            margin-left:auto;
            padding:auto;
        }
        .md\:w-24{
            width: 6rem;
        }
    }
    @media (max-width: 768px) {
        .product-content-digicor{
            width:auto;
            margin:0 -2rem 0 -2rem;
            padding:auto;
        }
        .cancel-grid{
            grid-template-columns: none !important;
        }
        .mobile-configure{
            grid-column: span 2 / span 2;
        }
        .mobile-btn {
            margin:0  !important
        }
        .storage-tab{
            display:inherit ;
            height:auto  !important
        }
        .drive_bays{
            justify-content: flex-start;
        }
        .h-24{
            min-height:96px;
            height:auto !important
        }
        .mobile_bom_collection{
            grid-template-columns: none !important;
        }
    }
    .section-error {
        color: #fff !important;
        display: inline-block;
        width: 8px;
        height: 8px;
        font-style: normal;
        border-radius: 50%;
        vertical-align: middle;
        font-size: 14px;
        text-align: center;
        line-height: 15px;
        position: absolute;
        right: -5px;
        top: 3px;
    }
    .section-error::before {
        content: "";
        width: 2px;
        height: 10px;
        position: absolute;
        top: 0;
        background-color: red;
        border-radius: 2px 2px 0 0;
    }
    .section-error::after {
        content: "";
        width: 3px;
        height: 3px;
        border-radius: 50%;
        background-color: red;
        top: 12px;
        position: absolute;
    }
    .gap-3{
        gap: 0.75rem;
    }
    .font_family{
        font-family: Heebo,ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji
    }
    .text-378BF7{
        color:#378BF7
    }
    .bg-378BF7{
        background:#378BF7
    }
    .h-24{
        height:96px
    }
    .text-777{
        color:#777
    }
    .bg-f8f8f8{
        background:#F8F8F8
    }
    .text-f8f8f8{
        color:#F8F8F8
    }
    .max-h-440{
        max-height:440px
    }
    .bg-e5edf8{
        background:#E5EDF8
    }
    .border-green-600{
        border-color: rgb(22 163 74);
    }
</style>


